/* Autogenerated by mlir-tblgen; don't manually edit. */

#include "proto/enumgen.pb.h"

#include <clang/CIR/Dialect/IR/CIRDialect.h>

namespace protocir {
class EnumDeserializer {
public:
// ATT or Intel
  static ::cir::AsmFlavor
  deserializeAsmFlavor(CIRAsmFlavor &pKind);

// Binary opcode for atomic fetch operations
  static ::cir::AtomicFetchKind
  deserializeAtomicFetchKind(CIRAtomicFetchKind &pKind);

// await kind
  static ::cir::AwaitKind
  deserializeAwaitKind(CIRAwaitKind &pKind);

// binary operation (arith and logic) kind
  static ::cir::BinOpKind
  deserializeBinOpKind(CIRBinOpKind &pKind);

// checked binary arithmetic operation kind
  static ::cir::BinOpOverflowKind
  deserializeBinOpOverflowKind(CIRBinOpOverflowKind &pKind);

// calling convention
  static ::cir::CallingConv
  deserializeCallingConv(CIRCallingConv &pKind);

// case kind
  static ::cir::CaseOpKind
  deserializeCaseOpKind(CIRCaseOpKind &pKind);

// cast kind
  static ::cir::CastKind
  deserializeCastKind(CIRCastKind &pKind);

// Designate limits for begin/end of catch param handling
  static ::cir::CatchParamKind
  deserializeCatchParamKind(CIRCatchParamKind &pKind);

// compare operation kind
  static ::cir::CmpOpKind
  deserializeCmpOpKind(CIRCmpOpKind &pKind);

// three-way comparison ordering kind
  static ::cir::CmpOrdering
  deserializeCmpOrdering(CIRCmpOrdering &pKind);

// complex number binary operation kind
  static ::cir::ComplexBinOpKind
  deserializeComplexBinOpKind(CIRComplexBinOpKind &pKind);

// complex multiplication and division implementation
  static ::cir::ComplexRangeKind
  deserializeComplexRangeKind(CIRComplexRangeKind &pKind);

// dynamic cast kind
  static ::cir::DynamicCastKind
  deserializeDynamicCastKind(CIRDynamicCastKind &pKind);

// Linkage type/kind
  static ::cir::GlobalLinkageKind
  deserializeGlobalLinkageKind(CIRGlobalLinkageKind &pKind);

// inlineKind
  static ::cir::InlineKind
  deserializeInlineKind(CIRInlineKind &pKind);

// Memory order according to C++11 memory model
  static ::cir::MemOrder
  deserializeMemOrder(CIRMemOrder &pKind);

// the behavior for signed overflow
  static ::cir::sob::SignedOverflowBehavior
  deserializeSignedOverflowBehavior(CIRSignedOverflowBehavior &pKind);

// size info type
  static ::cir::SizeInfoType
  deserializeSizeInfoType(CIRSizeInfoType &pKind);

// Source language
  static ::cir::SourceLanguage
  deserializeSourceLanguage(CIRSourceLanguage &pKind);

// TLS model
  static ::cir::TLS_Model
  deserializeTLS_Model(CIRTLS_Model &pKind);

// unary operation kind
  static ::cir::UnaryOpKind
  deserializeUnaryOpKind(CIRUnaryOpKind &pKind);

// C/C++ visibility
  static ::cir::VisibilityKind
  deserializeVisibilityKind(CIRVisibilityKind &pKind);


};
} // namespace protocir
