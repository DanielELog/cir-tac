/* Autogenerated by mlir-tblgen; don't manually edit. */
// clang-format off

#pragma once

#include "Util.h"
#include "proto/attr.pb.h"
#include "cir-tac/Deserializer.h"

#include <clang/CIR/Dialect/IR/CIRAttrs.h>
#include <mlir/IR/BuiltinAttributes.h>
#include <mlir/IR/Location.h>

namespace protocir {

class AttrDeserializer {
public:
  static mlir::NamedAttribute deserializeMLIRNamedAttr(ModuleInfo &mInfo, MLIRNamedAttr pAttr);
  static mlir::CallSiteLoc deserializeMLIRCallSiteLoc(ModuleInfo &mInfo, MLIRCallSiteLoc pAttr);
  static mlir::FileLineColLoc deserializeMLIRFileLineColLoc(ModuleInfo &mInfo, MLIRFileLineColLoc pAttr);
  static mlir::FusedLoc deserializeMLIRFusedLoc(ModuleInfo &mInfo, MLIRFusedLoc pAttr);
  static mlir::NameLoc deserializeMLIRNameLoc(ModuleInfo &mInfo, MLIRNameLoc pAttr);
  static mlir::OpaqueLoc deserializeMLIROpaqueLoc(ModuleInfo &mInfo, MLIROpaqueLoc pAttr);
  static mlir::UnknownLoc deserializeMLIRUnknownLoc(ModuleInfo &mInfo, MLIRUnknownLoc pAttr);
  static mlir::Attribute deserializeMLIRAttribute(ModuleInfo &mInfo, MLIRAttribute pAttr);
  static mlir::ArrayAttr deserializeMLIRArrayAttr(ModuleInfo &mInfo, MLIRArrayAttr pAttr);
  static mlir::DictionaryAttr deserializeMLIRDictionaryAttr(ModuleInfo &mInfo, MLIRDictionaryAttr pAttr);
  static mlir::FloatAttr deserializeMLIRFloatAttr(ModuleInfo &mInfo, MLIRFloatAttr pAttr);
  static mlir::IntegerAttr deserializeMLIRIntegerAttr(ModuleInfo &mInfo, MLIRIntegerAttr pAttr);
  static mlir::StringAttr deserializeMLIRStringAttr(ModuleInfo &mInfo, MLIRStringAttr pAttr);
  static mlir::TypeAttr deserializeMLIRTypeAttr(ModuleInfo &mInfo, MLIRTypeAttr pAttr);
  static mlir::UnitAttr deserializeMLIRUnitAttr(ModuleInfo &mInfo, MLIRUnitAttr pAttr);
  static mlir::FlatSymbolRefAttr deserializeMLIRFlatSymbolRefAttr(ModuleInfo &mInfo, MLIRFlatSymbolRefAttr pAttr);
  static mlir::DenseI32ArrayAttr deserializeMLIRDenseI32ArrayAttr(ModuleInfo &mInfo, MLIRDenseI32ArrayAttr pAttr);
  static mlir::Location deserializeMLIRLocation(ModuleInfo &mInfo, MLIRLocation pAttr);
  static cir::LangAttr deserializeCIRLangAttr(ModuleInfo &mInfo, CIRLangAttr pAttr);
  static cir::AddressSpaceAttr deserializeCIRAddressSpaceAttr(ModuleInfo &mInfo, CIRAddressSpaceAttr pAttr);
  static cir::AnnotationAttr deserializeCIRAnnotationAttr(ModuleInfo &mInfo, CIRAnnotationAttr pAttr);
  static cir::BitfieldInfoAttr deserializeCIRBitfieldInfoAttr(ModuleInfo &mInfo, CIRBitfieldInfoAttr pAttr);
  static cir::BoolAttr deserializeCIRBoolAttr(ModuleInfo &mInfo, CIRBoolAttr pAttr);
  static cir::TBAAAttr deserializeCIRTBAAAttr(ModuleInfo &mInfo, CIRTBAAAttr pAttr);
  static cir::CatchAllAttr deserializeCIRCatchAllAttr(ModuleInfo &mInfo, CIRCatchAllAttr pAttr);
  static cir::CatchUnwindAttr deserializeCIRCatchUnwindAttr(ModuleInfo &mInfo, CIRCatchUnwindAttr pAttr);
  static cir::CmpThreeWayInfoAttr deserializeCIRCmpThreeWayInfoAttr(ModuleInfo &mInfo, CIRCmpThreeWayInfoAttr pAttr);
  static cir::ComplexAttr deserializeCIRComplexAttr(ModuleInfo &mInfo, CIRComplexAttr pAttr);
  static cir::ConstArrayAttr deserializeCIRConstArrayAttr(ModuleInfo &mInfo, CIRConstArrayAttr pAttr);
  static cir::ConstPtrAttr deserializeCIRConstPtrAttr(ModuleInfo &mInfo, CIRConstPtrAttr pAttr);
  static cir::ConstStructAttr deserializeCIRConstStructAttr(ModuleInfo &mInfo, CIRConstStructAttr pAttr);
  static cir::ConstVectorAttr deserializeCIRConstVectorAttr(ModuleInfo &mInfo, CIRConstVectorAttr pAttr);
  static cir::ConvergentAttr deserializeCIRConvergentAttr(ModuleInfo &mInfo, CIRConvergentAttr pAttr);
  static cir::DataMemberAttr deserializeCIRDataMemberAttr(ModuleInfo &mInfo, CIRDataMemberAttr pAttr);
  static cir::DynamicCastInfoAttr deserializeCIRDynamicCastInfoAttr(ModuleInfo &mInfo, CIRDynamicCastInfoAttr pAttr);
  static cir::ExtraFuncAttributesAttr deserializeCIRExtraFuncAttributesAttr(ModuleInfo &mInfo, CIRExtraFuncAttributesAttr pAttr);
  static cir::FPAttr deserializeCIRFPAttr(ModuleInfo &mInfo, CIRFPAttr pAttr);
  static cir::GlobalAnnotationValuesAttr deserializeCIRGlobalAnnotationValuesAttr(ModuleInfo &mInfo, CIRGlobalAnnotationValuesAttr pAttr);
  static cir::GlobalCtorAttr deserializeCIRGlobalCtorAttr(ModuleInfo &mInfo, CIRGlobalCtorAttr pAttr);
  static cir::GlobalDtorAttr deserializeCIRGlobalDtorAttr(ModuleInfo &mInfo, CIRGlobalDtorAttr pAttr);
  static cir::GlobalViewAttr deserializeCIRGlobalViewAttr(ModuleInfo &mInfo, CIRGlobalViewAttr pAttr);
  static cir::InactiveUnionFieldAttr deserializeCIRInactiveUnionFieldAttr(ModuleInfo &mInfo, CIRInactiveUnionFieldAttr pAttr);
  static cir::InlineAttr deserializeCIRInlineAttr(ModuleInfo &mInfo, CIRInlineAttr pAttr);
  static cir::IntAttr deserializeCIRIntAttr(ModuleInfo &mInfo, CIRIntAttr pAttr);
  static cir::MethodAttr deserializeCIRMethodAttr(ModuleInfo &mInfo, CIRMethodAttr pAttr);
  static cir::NoThrowAttr deserializeCIRNoThrowAttr(ModuleInfo &mInfo, CIRNoThrowAttr pAttr);
  static cir::OpenCLKernelArgMetadataAttr deserializeCIROpenCLKernelArgMetadataAttr(ModuleInfo &mInfo, CIROpenCLKernelArgMetadataAttr pAttr);
  static cir::OpenCLKernelAttr deserializeCIROpenCLKernelAttr(ModuleInfo &mInfo, CIROpenCLKernelAttr pAttr);
  static cir::OpenCLKernelMetadataAttr deserializeCIROpenCLKernelMetadataAttr(ModuleInfo &mInfo, CIROpenCLKernelMetadataAttr pAttr);
  static cir::OpenCLKernelUniformWorkGroupSizeAttr deserializeCIROpenCLKernelUniformWorkGroupSizeAttr(ModuleInfo &mInfo, CIROpenCLKernelUniformWorkGroupSizeAttr pAttr);
  static cir::OpenCLVersionAttr deserializeCIROpenCLVersionAttr(ModuleInfo &mInfo, CIROpenCLVersionAttr pAttr);
  static cir::OptNoneAttr deserializeCIROptNoneAttr(ModuleInfo &mInfo, CIROptNoneAttr pAttr);
  static cir::StructLayoutAttr deserializeCIRStructLayoutAttr(ModuleInfo &mInfo, CIRStructLayoutAttr pAttr);
  static cir::TypeInfoAttr deserializeCIRTypeInfoAttr(ModuleInfo &mInfo, CIRTypeInfoAttr pAttr);
  static cir::UndefAttr deserializeCIRUndefAttr(ModuleInfo &mInfo, CIRUndefAttr pAttr);
  static cir::VTableAttr deserializeCIRVTableAttr(ModuleInfo &mInfo, CIRVTableAttr pAttr);
  static cir::VisibilityAttr deserializeCIRVisibilityAttr(ModuleInfo &mInfo, CIRVisibilityAttr pAttr);
  static cir::ZeroAttr deserializeCIRZeroAttr(ModuleInfo &mInfo, CIRZeroAttr pAttr);
  static cir::AsmFlavorAttr deserializeCIRAsmFlavorAttr(ModuleInfo &mInfo, CIRAsmFlavorAttr pAttr);
  static cir::AtomicFetchKindAttr deserializeCIRAtomicFetchKindAttr(ModuleInfo &mInfo, CIRAtomicFetchKindAttr pAttr);
  static cir::AwaitKindAttr deserializeCIRAwaitKindAttr(ModuleInfo &mInfo, CIRAwaitKindAttr pAttr);
  static cir::BinOpKindAttr deserializeCIRBinOpKindAttr(ModuleInfo &mInfo, CIRBinOpKindAttr pAttr);
  static cir::BinOpOverflowKindAttr deserializeCIRBinOpOverflowKindAttr(ModuleInfo &mInfo, CIRBinOpOverflowKindAttr pAttr);
  static cir::CallingConvAttr deserializeCIRCallingConvAttr(ModuleInfo &mInfo, CIRCallingConvAttr pAttr);
  static cir::CaseOpKindAttr deserializeCIRCaseOpKindAttr(ModuleInfo &mInfo, CIRCaseOpKindAttr pAttr);
  static cir::CastKindAttr deserializeCIRCastKindAttr(ModuleInfo &mInfo, CIRCastKindAttr pAttr);
  static cir::CatchParamKindAttr deserializeCIRCatchParamKindAttr(ModuleInfo &mInfo, CIRCatchParamKindAttr pAttr);
  static cir::CmpOpKindAttr deserializeCIRCmpOpKindAttr(ModuleInfo &mInfo, CIRCmpOpKindAttr pAttr);
  static cir::CmpOrderingAttr deserializeCIRCmpOrderingAttr(ModuleInfo &mInfo, CIRCmpOrderingAttr pAttr);
  static cir::ComplexBinOpKindAttr deserializeCIRComplexBinOpKindAttr(ModuleInfo &mInfo, CIRComplexBinOpKindAttr pAttr);
  static cir::ComplexRangeKindAttr deserializeCIRComplexRangeKindAttr(ModuleInfo &mInfo, CIRComplexRangeKindAttr pAttr);
  static cir::DynamicCastKindAttr deserializeCIRDynamicCastKindAttr(ModuleInfo &mInfo, CIRDynamicCastKindAttr pAttr);
  static cir::GlobalLinkageKindAttr deserializeCIRGlobalLinkageKindAttr(ModuleInfo &mInfo, CIRGlobalLinkageKindAttr pAttr);
  static cir::InlineKindAttr deserializeCIRInlineKindAttr(ModuleInfo &mInfo, CIRInlineKindAttr pAttr);
  static cir::MemOrderAttr deserializeCIRMemOrderAttr(ModuleInfo &mInfo, CIRMemOrderAttr pAttr);
  static cir::SignedOverflowBehaviorAttr deserializeCIRSignedOverflowBehaviorAttr(ModuleInfo &mInfo, CIRSignedOverflowBehaviorAttr pAttr);
  static cir::SizeInfoTypeAttr deserializeCIRSizeInfoTypeAttr(ModuleInfo &mInfo, CIRSizeInfoTypeAttr pAttr);
  static cir::SourceLanguageAttr deserializeCIRSourceLanguageAttr(ModuleInfo &mInfo, CIRSourceLanguageAttr pAttr);
  static cir::TLS_ModelAttr deserializeCIRTLSModelAttr(ModuleInfo &mInfo, CIRTLSModelAttr pAttr);
  static cir::UnaryOpKindAttr deserializeCIRUnaryOpKindAttr(ModuleInfo &mInfo, CIRUnaryOpKindAttr pAttr);
  static cir::VisibilityKindAttr deserializeCIRVisibilityKindAttr(ModuleInfo &mInfo, CIRVisibilityKindAttr pAttr);
};

} // namespace protocir

// clang-format on
