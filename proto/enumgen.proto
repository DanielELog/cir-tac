/* Autogenerated by mlir-tblgen; don't manually edit. */

syntax = "proto3";

package protocir;
option java_package = "org.jacodb.impl.grpc";

import "google/protobuf/empty.proto";
import "setup.proto";
// ATT or Intel

enum CIRAsmFlavor {
  AsmFlavorx86_att = 0;
  AsmFlavorx86_intel = 1;
}
// Binary opcode for atomic fetch operations

enum CIRAtomicFetchKind {
  AtomicFetchKindAdd = 0;
  AtomicFetchKindSub = 1;
  AtomicFetchKindAnd = 2;
  AtomicFetchKindXor = 3;
  AtomicFetchKindOr = 4;
  AtomicFetchKindNand = 5;
  AtomicFetchKindMax = 6;
  AtomicFetchKindMin = 7;
}
// await kind

enum CIRAwaitKind {
  AwaitKindinit = 0;
  AwaitKinduser = 1;
  AwaitKindyield = 2;
  AwaitKindfinal = 3;
}
// binary operation (arith and logic) kind

enum CIRBinOpKind {
  BinOpKindMul = 0;
  BinOpKindDiv = 1;
  BinOpKindRem = 2;
  BinOpKindAdd = 3;
  BinOpKindSub = 4;
  BinOpKindAnd = 5;
  BinOpKindXor = 6;
  BinOpKindOr = 7;
}
// checked binary arithmetic operation kind

enum CIRBinOpOverflowKind {
  BinOpOverflowKindAdd = 0;
  BinOpOverflowKindSub = 1;
  BinOpOverflowKindMul = 2;
}
// calling convention

enum CIRCallingConv {
  CallingConvC = 0;
  CallingConvSpirKernel = 1;
  CallingConvSpirFunction = 2;
}
// case kind

enum CIRCaseOpKind {
  CaseOpKindDefault = 0;
  CaseOpKindEqual = 1;
  CaseOpKindAnyof = 2;
  CaseOpKindRange = 3;
}
// cast kind

enum CIRCastKind {
  CastKindint_to_bool = 0;
  CastKindarray_to_ptrdecay = 1;
  CastKindintegral = 2;
  CastKindbitcast = 3;
  CastKindfloating = 4;
  CastKindptr_to_bool = 5;
  CastKindfloat_to_int = 6;
  CastKindint_to_ptr = 7;
  CastKindptr_to_int = 8;
  CastKindfloat_to_bool = 9;
  CastKindbool_to_int = 10;
  CastKindint_to_float = 11;
  CastKindbool_to_float = 12;
  CastKindaddress_space = 13;
  CastKindfloat_to_complex = 14;
  CastKindint_to_complex = 15;
  CastKindfloat_complex_to_real = 16;
  CastKindint_complex_to_real = 17;
  CastKindfloat_complex_to_bool = 18;
  CastKindint_complex_to_bool = 19;
  CastKindfloat_complex = 20;
  CastKindfloat_complex_to_int_complex = 21;
  CastKindint_complex = 22;
  CastKindint_complex_to_float_complex = 23;
}
// Designate limits for begin/end of catch param handling

enum CIRCatchParamKind {
  CatchParamKindbegin = 0;
  CatchParamKindend = 1;
}
// compare operation kind

enum CIRCmpOpKind {
  CmpOpKindlt = 0;
  CmpOpKindle = 1;
  CmpOpKindgt = 2;
  CmpOpKindge = 3;
  CmpOpKindeq = 4;
  CmpOpKindne = 5;
}
// three-way comparison ordering kind

enum CIRCmpOrdering {
  CmpOrderingStrong = 0;
  CmpOrderingPartial = 1;
}
// complex number binary operation kind

enum CIRComplexBinOpKind {
  ComplexBinOpKindMul = 0;
  ComplexBinOpKindDiv = 1;
}
// complex multiplication and division implementation

enum CIRComplexRangeKind {
  ComplexRangeKindFull = 0;
  ComplexRangeKindImproved = 1;
  ComplexRangeKindPromoted = 2;
  ComplexRangeKindBasic = 3;
  ComplexRangeKindNone = 4;
}
// dynamic cast kind

enum CIRDynamicCastKind {
  DynamicCastKindptr = 0;
  DynamicCastKindref = 1;
}
// Linkage type/kind

enum CIRGlobalLinkageKind {
  GlobalLinkageKindExternalLinkage = 0;
  GlobalLinkageKindAvailableExternallyLinkage = 1;
  GlobalLinkageKindLinkOnceAnyLinkage = 2;
  GlobalLinkageKindLinkOnceODRLinkage = 3;
  GlobalLinkageKindWeakAnyLinkage = 4;
  GlobalLinkageKindWeakODRLinkage = 5;
  GlobalLinkageKindInternalLinkage = 6;
  GlobalLinkageKindPrivateLinkage = 7;
  GlobalLinkageKindExternalWeakLinkage = 8;
  GlobalLinkageKindCommonLinkage = 9;
}
// inlineKind

enum CIRInlineKind {
  InlineKindNoInline = 0;
  InlineKindAlwaysInline = 1;
  InlineKindInlineHint = 2;
}
// Memory order according to C++11 memory model

enum CIRMemOrder {
  MemOrderRelaxed = 0;
  MemOrderConsume = 1;
  MemOrderAcquire = 2;
  MemOrderRelease = 3;
  MemOrderAcquireRelease = 4;
  MemOrderSequentiallyConsistent = 5;
}
// the behavior for signed overflow

enum CIRSignedOverflowBehavior {
  SignedOverflowBehaviorundefined = 0;
  SignedOverflowBehaviordefined = 1;
  SignedOverflowBehaviortrapping = 2;
}
// size info type

enum CIRSizeInfoType {
  SizeInfoTypemin = 0;
  SizeInfoTypemax = 1;
}
// Source language

enum CIRSourceLanguage {
  SourceLanguageC = 0;
  SourceLanguageCXX = 1;
  SourceLanguageOpenCLC = 2;
}
// TLS model

enum CIRTLS_Model {
  TLS_ModelGeneralDynamic = 0;
  TLS_ModelLocalDynamic = 1;
  TLS_ModelInitialExec = 2;
  TLS_ModelLocalExec = 3;
}
// unary operation kind

enum CIRUnaryOpKind {
  UnaryOpKindInc = 0;
  UnaryOpKindDec = 1;
  UnaryOpKindPlus = 2;
  UnaryOpKindMinus = 3;
  UnaryOpKindNot = 4;
}
// C/C++ visibility

enum CIRVisibilityKind {
  VisibilityKindDefault = 0;
  VisibilityKindHidden = 1;
  VisibilityKindProtected = 2;
}
