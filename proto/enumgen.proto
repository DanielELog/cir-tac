/* Autogenerated by mlir-tblgen; don't manually edit. */

syntax = "proto3";

package protocir;
option java_package = "org.jacodb.impl.grpc";

import "google/protobuf/empty.proto";
import "setup.proto";
// ATT or Intel

enum CIRAsmFlavor {
  AsmFlavor_x86_att = 0;
  AsmFlavor_x86_intel = 1;
}
// Binary opcode for atomic fetch operations

enum CIRAtomicFetchKind {
  AtomicFetchKind_Add = 0;
  AtomicFetchKind_Sub = 1;
  AtomicFetchKind_And = 2;
  AtomicFetchKind_Xor = 3;
  AtomicFetchKind_Or = 4;
  AtomicFetchKind_Nand = 5;
  AtomicFetchKind_Max = 6;
  AtomicFetchKind_Min = 7;
}
// await kind

enum CIRAwaitKind {
  AwaitKind_init = 0;
  AwaitKind_user = 1;
  AwaitKind_yield = 2;
  AwaitKind_final = 3;
}
// binary operation (arith and logic) kind

enum CIRBinOpKind {
  BinOpKind_Mul = 0;
  BinOpKind_Div = 1;
  BinOpKind_Rem = 2;
  BinOpKind_Add = 3;
  BinOpKind_Sub = 4;
  BinOpKind_And = 5;
  BinOpKind_Xor = 6;
  BinOpKind_Or = 7;
}
// checked binary arithmetic operation kind

enum CIRBinOpOverflowKind {
  BinOpOverflowKind_Add = 0;
  BinOpOverflowKind_Sub = 1;
  BinOpOverflowKind_Mul = 2;
}
// calling convention

enum CIRCallingConv {
  CallingConv_C = 0;
  CallingConv_SpirKernel = 1;
  CallingConv_SpirFunction = 2;
}
// case kind

enum CIRCaseOpKind {
  CaseOpKind_Default = 0;
  CaseOpKind_Equal = 1;
  CaseOpKind_Anyof = 2;
  CaseOpKind_Range = 3;
}
// cast kind

enum CIRCastKind {
  CastKind_int_to_bool = 0;
  CastKind_array_to_ptrdecay = 1;
  CastKind_integral = 2;
  CastKind_bitcast = 3;
  CastKind_floating = 4;
  CastKind_ptr_to_bool = 5;
  CastKind_float_to_int = 6;
  CastKind_int_to_ptr = 7;
  CastKind_ptr_to_int = 8;
  CastKind_float_to_bool = 9;
  CastKind_bool_to_int = 10;
  CastKind_int_to_float = 11;
  CastKind_bool_to_float = 12;
  CastKind_address_space = 13;
  CastKind_float_to_complex = 14;
  CastKind_int_to_complex = 15;
  CastKind_float_complex_to_real = 16;
  CastKind_int_complex_to_real = 17;
  CastKind_float_complex_to_bool = 18;
  CastKind_int_complex_to_bool = 19;
  CastKind_float_complex = 20;
  CastKind_float_complex_to_int_complex = 21;
  CastKind_int_complex = 22;
  CastKind_int_complex_to_float_complex = 23;
}
// Designate limits for begin/end of catch param handling

enum CIRCatchParamKind {
  CatchParamKind_begin = 0;
  CatchParamKind_end = 1;
}
// compare operation kind

enum CIRCmpOpKind {
  CmpOpKind_lt = 0;
  CmpOpKind_le = 1;
  CmpOpKind_gt = 2;
  CmpOpKind_ge = 3;
  CmpOpKind_eq = 4;
  CmpOpKind_ne = 5;
}
// three-way comparison ordering kind

enum CIRCmpOrdering {
  CmpOrdering_Strong = 0;
  CmpOrdering_Partial = 1;
}
// complex number binary operation kind

enum CIRComplexBinOpKind {
  ComplexBinOpKind_Mul = 0;
  ComplexBinOpKind_Div = 1;
}
// complex multiplication and division implementation

enum CIRComplexRangeKind {
  ComplexRangeKind_Full = 0;
  ComplexRangeKind_Improved = 1;
  ComplexRangeKind_Promoted = 2;
  ComplexRangeKind_Basic = 3;
  ComplexRangeKind_None = 4;
}
// dynamic cast kind

enum CIRDynamicCastKind {
  DynamicCastKind_ptr = 0;
  DynamicCastKind_ref = 1;
}
// Linkage type/kind

enum CIRGlobalLinkageKind {
  GlobalLinkageKind_ExternalLinkage = 0;
  GlobalLinkageKind_AvailableExternallyLinkage = 1;
  GlobalLinkageKind_LinkOnceAnyLinkage = 2;
  GlobalLinkageKind_LinkOnceODRLinkage = 3;
  GlobalLinkageKind_WeakAnyLinkage = 4;
  GlobalLinkageKind_WeakODRLinkage = 5;
  GlobalLinkageKind_InternalLinkage = 6;
  GlobalLinkageKind_PrivateLinkage = 7;
  GlobalLinkageKind_ExternalWeakLinkage = 8;
  GlobalLinkageKind_CommonLinkage = 9;
}
// inlineKind

enum CIRInlineKind {
  InlineKind_NoInline = 0;
  InlineKind_AlwaysInline = 1;
  InlineKind_InlineHint = 2;
}
// Memory order according to C++11 memory model

enum CIRMemOrder {
  MemOrder_Relaxed = 0;
  MemOrder_Consume = 1;
  MemOrder_Acquire = 2;
  MemOrder_Release = 3;
  MemOrder_AcquireRelease = 4;
  MemOrder_SequentiallyConsistent = 5;
}
// the behavior for signed overflow

enum CIRSignedOverflowBehavior {
  SignedOverflowBehavior_undefined = 0;
  SignedOverflowBehavior_defined = 1;
  SignedOverflowBehavior_trapping = 2;
}
// size info type

enum CIRSizeInfoType {
  SizeInfoType_min = 0;
  SizeInfoType_max = 1;
}
// Source language

enum CIRSourceLanguage {
  SourceLanguage_C = 0;
  SourceLanguage_CXX = 1;
  SourceLanguage_OpenCLC = 2;
}
// TLS model

enum CIRTLS_Model {
  TLS_Model_GeneralDynamic = 0;
  TLS_Model_LocalDynamic = 1;
  TLS_Model_InitialExec = 2;
  TLS_Model_LocalExec = 3;
}
// unary operation kind

enum CIRUnaryOpKind {
  UnaryOpKind_Inc = 0;
  UnaryOpKind_Dec = 1;
  UnaryOpKind_Plus = 2;
  UnaryOpKind_Minus = 3;
  UnaryOpKind_Not = 4;
}
// C/C++ visibility

enum CIRVisibilityKind {
  VisibilityKind_Default = 0;
  VisibilityKind_Hidden = 1;
  VisibilityKind_Protected = 2;
}
