/* Autogenerated by mlir-tblgen; don't manually edit. */

syntax = "proto3";

package protocir;
option java_package = "org.jacodb.impl.grpc";

import "setup.proto";
import "enumgen.proto";

message CIROp {
  CIROpID base = 1;
  repeated CIRTypeID result_types = 2;
  oneof operation {

    CIRAbsOp abs_op = 3;
    CIRAllocExceptionOp alloc_exception_op = 4;
    CIRAllocaOp alloca_op = 5;
    CIRArrayCtor array_ctor = 6;
    CIRArrayDtor array_dtor = 7;
    CIRAssumeAlignedOp assume_aligned_op = 8;
    CIRAssumeOp assume_op = 9;
    CIRAssumeSepStorageOp assume_sep_storage_op = 10;
    CIRAtomicCmpXchg atomic_cmp_xchg = 11;
    CIRAtomicFetch atomic_fetch = 12;
    CIRAtomicXchg atomic_xchg = 13;
    CIRAwaitOp await_op = 14;
    CIRBaseClassAddrOp base_class_addr_op = 15;
    CIRBinOp bin_op = 16;
    CIRBinOpOverflowOp bin_op_overflow_op = 17;
    CIRBitClrsbOp bit_clrsb_op = 18;
    CIRBitClzOp bit_clz_op = 19;
    CIRBitCtzOp bit_ctz_op = 20;
    CIRBitFfsOp bit_ffs_op = 21;
    CIRBitParityOp bit_parity_op = 22;
    CIRBitPopcountOp bit_popcount_op = 23;
    CIRBrCondOp br_cond_op = 24;
    CIRBrOp br_op = 25;
    CIRBreakOp break_op = 26;
    CIRByteswapOp byteswap_op = 27;
    CIRInlineAsmOp inline_asm_op = 28;
    CIRCallOp call_op = 29;
    CIRCaseOp case_op = 30;
    CIRCastOp cast_op = 31;
    CIRCatchParamOp catch_param_op = 32;
    CIRCeilOp ceil_op = 33;
    CIRClearCacheOp clear_cache_op = 34;
    CIRCmpOp cmp_op = 35;
    CIRCmpThreeWayOp cmp_three_way_op = 36;
    CIRComplexBinOp complex_bin_op = 37;
    CIRComplexCreateOp complex_create_op = 38;
    CIRComplexImagOp complex_imag_op = 39;
    CIRComplexImagPtrOp complex_imag_ptr_op = 40;
    CIRComplexRealOp complex_real_op = 41;
    CIRComplexRealPtrOp complex_real_ptr_op = 42;
    CIRConditionOp condition_op = 43;
    CIRConstantOp constant_op = 44;
    CIRContinueOp continue_op = 45;
    CIRCopyOp copy_op = 46;
    CIRCopysignOp copysign_op = 47;
    CIRCosOp cos_op = 48;
    CIRDerivedClassAddrOp derived_class_addr_op = 49;
    CIRDoWhileOp do_while_op = 50;
    CIRDynamicCastOp dynamic_cast_op = 51;
    CIREhInflightOp eh_inflight_op = 52;
    CIREhTypeIdOp eh_type_id_op = 53;
    CIRExp2Op exp2_op = 54;
    CIRExpOp exp_op = 55;
    CIRExpectOp expect_op = 56;
    CIRFAbsOp f_abs_op = 57;
    CIRFMaxOp f_max_op = 58;
    CIRFMinOp f_min_op = 59;
    CIRFModOp f_mod_op = 60;
    CIRFloorOp floor_op = 61;
    CIRForOp for_op = 62;
    CIRFrameAddrOp frame_addr_op = 63;
    CIRFreeExceptionOp free_exception_op = 64;
    CIRFuncOp func_op = 65;
    CIRGetBitfieldOp get_bitfield_op = 66;
    CIRGetGlobalOp get_global_op = 67;
    CIRGetMemberOp get_member_op = 68;
    CIRGetMethodOp get_method_op = 69;
    CIRGetRuntimeMemberOp get_runtime_member_op = 70;
    CIRGlobalOp global_op = 71;
    CIRGotoOp goto_op = 72;
    CIRIfOp if_op = 73;
    CIRIsConstantOp is_constant_op = 74;
    CIRIsFPClassOp is_fp_class_op = 75;
    CIRIterBeginOp iter_begin_op = 76;
    CIRIterEndOp iter_end_op = 77;
    CIRLLVMIntrinsicCallOp llvm_intrinsic_call_op = 78;
    CIRLLrintOp l_lrint_op = 79;
    CIRLLroundOp l_lround_op = 80;
    CIRLabelOp label_op = 81;
    CIRLoadOp load_op = 82;
    CIRLog10Op log10_op = 83;
    CIRLog2Op log2_op = 84;
    CIRLogOp log_op = 85;
    CIRLrintOp lrint_op = 86;
    CIRLroundOp lround_op = 87;
    CIRMemChrOp mem_chr_op = 88;
    CIRMemCpyInlineOp mem_cpy_inline_op = 89;
    CIRMemCpyOp mem_cpy_op = 90;
    CIRMemMoveOp mem_move_op = 91;
    CIRMemSetInlineOp mem_set_inline_op = 92;
    CIRMemSetOp mem_set_op = 93;
    CIRNearbyintOp nearbyint_op = 94;
    CIRObjSizeOp obj_size_op = 95;
    CIRPowOp pow_op = 96;
    CIRPrefetchOp prefetch_op = 97;
    CIRPtrDiffOp ptr_diff_op = 98;
    CIRPtrMaskOp ptr_mask_op = 99;
    CIRPtrStrideOp ptr_stride_op = 100;
    CIRResumeOp resume_op = 101;
    CIRReturnAddrOp return_addr_op = 102;
    CIRReturnOp return_op = 103;
    CIRRintOp rint_op = 104;
    CIRRotateOp rotate_op = 105;
    CIRRoundOp round_op = 106;
    CIRScopeOp scope_op = 107;
    CIRSelectOp select_op = 108;
    CIRSetBitfieldOp set_bitfield_op = 109;
    CIRShiftOp shift_op = 110;
    CIRSignBitOp sign_bit_op = 111;
    CIRSinOp sin_op = 112;
    CIRSqrtOp sqrt_op = 113;
    CIRStackRestoreOp stack_restore_op = 114;
    CIRStackSaveOp stack_save_op = 115;
    CIRStdFindOp std_find_op = 116;
    CIRStoreOp store_op = 117;
    CIRSwitchFlatOp switch_flat_op = 118;
    CIRSwitchOp switch_op = 119;
    CIRTernaryOp ternary_op = 120;
    CIRThrowOp throw_op = 121;
    CIRTrapOp trap_op = 122;
    CIRTruncOp trunc_op = 123;
    CIRTryCallOp try_call_op = 124;
    CIRTryOp try_op = 125;
    CIRUnaryOp unary_op = 126;
    CIRUnreachableOp unreachable_op = 127;
    CIRVAArgOp va_arg_op = 128;
    CIRVACopyOp va_copy_op = 129;
    CIRVAEndOp va_end_op = 130;
    CIRVAStartOp va_start_op = 131;
    CIRVTTAddrPointOp vtt_addr_point_op = 132;
    CIRVTableAddrPointOp v_table_addr_point_op = 133;
    CIRVecCmpOp vec_cmp_op = 134;
    CIRVecCreateOp vec_create_op = 135;
    CIRVecExtractOp vec_extract_op = 136;
    CIRVecInsertOp vec_insert_op = 137;
    CIRVecShuffleDynamicOp vec_shuffle_dynamic_op = 138;
    CIRVecShuffleOp vec_shuffle_op = 139;
    CIRVecSplatOp vec_splat_op = 140;
    CIRVecTernaryOp vec_ternary_op = 141;
    CIRWhileOp while_op = 142;
    CIRYieldOp yield_op = 143;
  }
}

message CIRAbsOp {
  CIROpID src = 1;

  bool poison = 2;
}

message CIRAllocExceptionOp { uint64 size = 1; }

message CIRAllocaOp {
  optional CIROpID dyn_alloc_size = 1;

  CIRTypeID alloca_type = 2;
  string name = 3;
  bool init = 4;
  bool constant = 5;
  optional uint64 alignment = 6;
}

message CIRArrayCtor { CIROpID addr = 1; }

message CIRArrayDtor { CIROpID addr = 1; }

message CIRAssumeAlignedOp {
  CIROpID pointer = 1;
  optional CIROpID offset = 2;

  uint64 alignment = 3;
}

message CIRAssumeOp { CIROpID predicate = 1; }

message CIRAssumeSepStorageOp {
  CIROpID ptr1 = 1;
  CIROpID ptr2 = 2;
}

message CIRAtomicCmpXchg {
  CIROpID ptr = 1;
  CIROpID expected = 2;
  CIROpID desired = 3;

  CIRMemOrder succ_order = 4;
  CIRMemOrder fail_order = 5;
  bool weak = 6;
  bool is_volatile = 7;
}

message CIRAtomicFetch {
  CIROpID ptr = 1;
  CIROpID val = 2;

  CIRAtomicFetchKind binop = 3;
  CIRMemOrder mem_order = 4;
  bool is_volatile = 5;
  bool fetch_first = 6;
}

message CIRAtomicXchg {
  CIROpID ptr = 1;
  CIROpID val = 2;

  CIRMemOrder mem_order = 3;
  bool is_volatile = 4;
}

message CIRAwaitOp { CIRAwaitKind kind = 1; }

message CIRBaseClassAddrOp {
  CIROpID derived_addr = 1;

  string offset = 2;
  bool assume_not_null = 3;
}

message CIRBinOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;

  CIRBinOpKind kind = 3;
  bool no_unsigned_wrap = 4;
  bool no_signed_wrap = 5;
}

message CIRBinOpOverflowOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;

  CIRBinOpOverflowKind kind = 3;
}

message CIRBitClrsbOp { CIROpID input = 1; }

message CIRBitClzOp { CIROpID input = 1; }

message CIRBitCtzOp { CIROpID input = 1; }

message CIRBitFfsOp { CIROpID input = 1; }

message CIRBitParityOp { CIROpID input = 1; }

message CIRBitPopcountOp { CIROpID input = 1; }

message CIRBrCondOp {
  CIROpID cond = 1;
  repeated CIROpID dest_operands_true = 2;
  repeated CIROpID dest_operands_false = 3;

  CIRBlockID dest_true = 4;
  CIRBlockID dest_false = 5;
}

message CIRBrOp {
  repeated CIROpID dest_operands = 1;

  CIRBlockID dest = 2;
}

message CIRBreakOp {}

message CIRByteswapOp { CIROpID input = 1; }

message CIRInlineAsmOp {
  repeated CIROpIDs operands = 1;

  string asm_string = 2;
  string constraints = 3;
  bool side_effects = 4;
  CIRAsmFlavor asm_flavor = 5;
  repeated uint32 operands_segments = 6;
}

message CIRCallOp {
  repeated CIROpID arg_ops = 1;

  bool exception = 2;
  optional string callee = 3;
  CIRCallingConv calling_conv = 4;
}

message CIRCaseOp { CIRCaseOpKind kind = 1; }

message CIRCastOp {
  CIROpID src = 1;

  CIRCastKind kind = 2;
}

message CIRCatchParamOp {
  optional CIROpID exception_ptr = 1;

  optional CIRCatchParamKind kind = 2;
}

message CIRCeilOp { CIROpID src = 1; }

message CIRClearCacheOp {
  CIROpID begin = 1;
  CIROpID end = 2;
}

message CIRCmpOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;

  CIRCmpOpKind kind = 3;
}

message CIRCmpThreeWayOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;
}

message CIRComplexBinOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;

  CIRComplexBinOpKind kind = 3;
  CIRComplexRangeKind range = 4;
  bool promoted = 5;
}

message CIRComplexCreateOp {
  CIROpID real = 1;
  CIROpID imag = 2;
}

message CIRComplexImagOp { CIROpID operand = 1; }

message CIRComplexImagPtrOp { CIROpID operand = 1; }

message CIRComplexRealOp { CIROpID operand = 1; }

message CIRComplexRealPtrOp { CIROpID operand = 1; }

message CIRConditionOp { CIROpID condition = 1; }

message CIRConstantOp { string value = 1; }

message CIRContinueOp {}

message CIRCopyOp {
  CIROpID dst = 1;
  CIROpID src = 2;

  bool is_volatile = 3;
}

message CIRCopysignOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;
}

message CIRCosOp { CIROpID src = 1; }

message CIRDerivedClassAddrOp {
  CIROpID base_addr = 1;

  string offset = 2;
  bool assume_not_null = 3;
}

message CIRDoWhileOp {}

message CIRDynamicCastOp {
  CIROpID src = 1;

  CIRDynamicCastKind kind = 2;
  bool relative_layout = 3;
}

message CIREhInflightOp { bool cleanup = 1; }

message CIREhTypeIdOp { string type_sym = 1; }

message CIRExp2Op { CIROpID src = 1; }

message CIRExpOp { CIROpID src = 1; }

message CIRExpectOp {
  CIROpID val = 1;
  CIROpID expected = 2;

  optional string prob = 3;
}

message CIRFAbsOp { CIROpID src = 1; }

message CIRFMaxOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;
}

message CIRFMinOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;
}

message CIRFModOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;
}

message CIRFloorOp { CIROpID src = 1; }

message CIRForOp {}

message CIRFrameAddrOp { CIROpID level = 1; }

message CIRFreeExceptionOp { CIROpID ptr = 1; }

message CIRFuncOp {

  string sym_name = 1;
  CIRVisibilityKind global_visibility = 2;
  CIRTypeID function_type = 3;
  bool builtin = 4;
  bool coroutine = 5;
  bool lambda = 6;
  bool no_proto = 7;
  bool dsolocal = 8;
  CIRGlobalLinkageKind linkage = 9;
  CIRCallingConv calling_conv = 10;
  optional string sym_visibility = 11;
  bool comdat = 12;
  optional string aliasee = 13;
  bool global_ctor = 14;
  bool global_dtor = 15;
}

message CIRGetBitfieldOp {
  CIROpID addr = 1;

  bool is_volatile = 2;
}

message CIRGetGlobalOp {

  string name = 1;
  bool tls = 2;
}

message CIRGetMemberOp {
  CIROpID addr = 1;

  string name = 2;
  string index_attr = 3;
}

message CIRGetMethodOp {
  CIROpID method = 1;
  CIROpID object = 2;
}

message CIRGetRuntimeMemberOp {
  CIROpID addr = 1;
  CIROpID member = 2;
}

message CIRGlobalOp {

  string sym_name = 1;
  CIRVisibilityKind global_visibility = 2;
  optional string sym_visibility = 3;
  CIRTypeID sym_type = 4;
  CIRGlobalLinkageKind linkage = 5;
  optional CIRTLS_Model tls_model = 6;
  bool comdat = 7;
  bool constant = 8;
  bool dsolocal = 9;
  optional uint64 alignment = 10;
  optional string section = 11;
}

message CIRGotoOp { string label = 1; }

message CIRIfOp { CIROpID condition = 1; }

message CIRIsConstantOp { CIROpID val = 1; }

message CIRIsFPClassOp {
  CIROpID src = 1;

  uint32 flags = 2;
}

message CIRIterBeginOp {
  CIROpID container = 1;

  string original_fn = 2;
}

message CIRIterEndOp {
  CIROpID container = 1;

  string original_fn = 2;
}

message CIRLLVMIntrinsicCallOp {
  repeated CIROpID arg_ops = 1;

  string intrinsic_name = 2;
}

message CIRLLrintOp { CIROpID src = 1; }

message CIRLLroundOp { CIROpID src = 1; }

message CIRLabelOp { string label = 1; }

message CIRLoadOp {
  CIROpID addr = 1;

  bool is_deref = 2;
  bool is_volatile = 3;
  optional uint64 alignment = 4;
  optional CIRMemOrder mem_order = 5;
}

message CIRLog10Op { CIROpID src = 1; }

message CIRLog2Op { CIROpID src = 1; }

message CIRLogOp { CIROpID src = 1; }

message CIRLrintOp { CIROpID src = 1; }

message CIRLroundOp { CIROpID src = 1; }

message CIRMemChrOp {
  CIROpID src = 1;
  CIROpID pattern = 2;
  CIROpID len = 3;
}

message CIRMemCpyInlineOp {
  CIROpID dst = 1;
  CIROpID src = 2;

  uint64 len = 3;
}

message CIRMemCpyOp {
  CIROpID dst = 1;
  CIROpID src = 2;
  CIROpID len = 3;
}

message CIRMemMoveOp {
  CIROpID dst = 1;
  CIROpID src = 2;
  CIROpID len = 3;
}

message CIRMemSetInlineOp {
  CIROpID dst = 1;
  CIROpID val = 2;

  uint64 len = 3;
}

message CIRMemSetOp {
  CIROpID dst = 1;
  CIROpID val = 2;
  CIROpID len = 3;
}

message CIRNearbyintOp { CIROpID src = 1; }

message CIRObjSizeOp {
  CIROpID ptr = 1;

  CIRSizeInfoType kind = 2;
  bool dynamic = 3;
}

message CIRPowOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;
}

message CIRPrefetchOp {
  CIROpID addr = 1;

  uint32 locality = 2;
  bool is_write = 3;
}

message CIRPtrDiffOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;
}

message CIRPtrMaskOp {
  CIROpID ptr = 1;
  CIROpID mask = 2;
}

message CIRPtrStrideOp {
  CIROpID base = 1;
  CIROpID stride = 2;
}

message CIRResumeOp {
  optional CIROpID exception_ptr = 1;
  optional CIROpID type_id = 2;

  bool rethrow = 3;
}

message CIRReturnAddrOp { CIROpID level = 1; }

message CIRReturnOp { repeated CIROpID input = 1; }

message CIRRintOp { CIROpID src = 1; }

message CIRRotateOp {
  CIROpID src = 1;
  CIROpID amt = 2;

  bool left = 3;
}

message CIRRoundOp { CIROpID src = 1; }

message CIRScopeOp {}

message CIRSelectOp {
  CIROpID condition = 1;
  CIROpID true_value = 2;
  CIROpID false_value = 3;
}

message CIRSetBitfieldOp {
  CIROpID addr = 1;
  CIROpID src = 2;

  bool is_volatile = 3;
}

message CIRShiftOp {
  CIROpID value = 1;
  CIROpID amount = 2;

  bool is_shiftleft = 3;
}

message CIRSignBitOp { CIROpID input = 1; }

message CIRSinOp { CIROpID src = 1; }

message CIRSqrtOp { CIROpID src = 1; }

message CIRStackRestoreOp { CIROpID ptr = 1; }

message CIRStackSaveOp {}

message CIRStdFindOp {
  CIROpID first = 1;
  CIROpID last = 2;
  CIROpID pattern = 3;

  string original_fn = 4;
}

message CIRStoreOp {
  CIROpID value = 1;
  CIROpID addr = 2;

  bool is_volatile = 3;
  optional uint64 alignment = 4;
  optional CIRMemOrder mem_order = 5;
}

message CIRSwitchFlatOp {
  CIROpID condition = 1;
  repeated CIROpID default_operands = 2;
  repeated CIROpIDs case_operands = 3;

  repeated uint32 case_operand_segments = 4;

  CIRBlockID default_destination = 5;
  repeated CIRBlockID case_destinations = 6;
}

message CIRSwitchOp { CIROpID condition = 1; }

message CIRTernaryOp { CIROpID cond = 1; }

message CIRThrowOp {
  optional CIROpID exception_ptr = 1;

  optional string type_info = 2;
  optional string dtor = 3;
}

message CIRTrapOp {}

message CIRTruncOp { CIROpID src = 1; }

message CIRTryCallOp {
  repeated CIROpID cont_operands = 1;
  repeated CIROpID landing_pad_operands = 2;
  repeated CIROpID arg_ops = 3;

  optional string callee = 4;
  CIRCallingConv calling_conv = 5;

  CIRBlockID cont = 6;
  CIRBlockID landing_pad = 7;
}

message CIRTryOp {

  bool synthetic = 1;
  bool cleanup = 2;
}

message CIRUnaryOp {
  CIROpID input = 1;

  CIRUnaryOpKind kind = 2;
}

message CIRUnreachableOp {}

message CIRVAArgOp { CIROpID arg_list = 1; }

message CIRVACopyOp {
  CIROpID dst_list = 1;
  CIROpID src_list = 2;
}

message CIRVAEndOp { CIROpID arg_list = 1; }

message CIRVAStartOp { CIROpID arg_list = 1; }

message CIRVTTAddrPointOp {
  optional CIROpID sym_addr = 1;

  optional string name = 2;
  uint32 offset = 3;
}

message CIRVTableAddrPointOp {
  optional CIROpID sym_addr = 1;

  optional string name = 2;
  uint32 vtable_index = 3;
  uint32 address_point_index = 4;
}

message CIRVecCmpOp {
  CIROpID lhs = 1;
  CIROpID rhs = 2;

  CIRCmpOpKind kind = 3;
}

message CIRVecCreateOp { repeated CIROpID elements = 1; }

message CIRVecExtractOp {
  CIROpID vec = 1;
  CIROpID index = 2;
}

message CIRVecInsertOp {
  CIROpID vec = 1;
  CIROpID value = 2;
  CIROpID index = 3;
}

message CIRVecShuffleDynamicOp {
  CIROpID vec = 1;
  CIROpID indices = 2;
}

message CIRVecShuffleOp {
  CIROpID vec1 = 1;
  CIROpID vec2 = 2;
}

message CIRVecSplatOp { CIROpID value = 1; }

message CIRVecTernaryOp {
  CIROpID cond = 1;
  CIROpID vec1 = 2;
  CIROpID vec2 = 3;
}

message CIRWhileOp {}

message CIRYieldOp { repeated CIROpID args = 1; }
