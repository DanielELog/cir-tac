/* Autogenerated by mlir-tblgen; don't manually edit. */
// clang-format off

#include "cir-tac/EnumDeserializer.h"
#include <clang/CIR/Dialect/IR/CIRTypes.h>

using namespace protocir;

cir::AsmFlavor EnumDeserializer::deserializeCIRAsmFlavor(CIRAsmFlavor e) {
  switch (e) {
    case CIRAsmFlavor::AsmFlavor_X86Att:
      return cir::AsmFlavor::x86_att;
    case CIRAsmFlavor::AsmFlavor_X86Intel:
      return cir::AsmFlavor::x86_intel;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::AtomicFetchKind EnumDeserializer::deserializeCIRAtomicFetchKind(CIRAtomicFetchKind e) {
  switch (e) {
    case CIRAtomicFetchKind::AtomicFetchKind_Add:
      return cir::AtomicFetchKind::Add;
    case CIRAtomicFetchKind::AtomicFetchKind_Sub:
      return cir::AtomicFetchKind::Sub;
    case CIRAtomicFetchKind::AtomicFetchKind_And:
      return cir::AtomicFetchKind::And;
    case CIRAtomicFetchKind::AtomicFetchKind_Xor:
      return cir::AtomicFetchKind::Xor;
    case CIRAtomicFetchKind::AtomicFetchKind_Or:
      return cir::AtomicFetchKind::Or;
    case CIRAtomicFetchKind::AtomicFetchKind_Nand:
      return cir::AtomicFetchKind::Nand;
    case CIRAtomicFetchKind::AtomicFetchKind_Max:
      return cir::AtomicFetchKind::Max;
    case CIRAtomicFetchKind::AtomicFetchKind_Min:
      return cir::AtomicFetchKind::Min;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::AwaitKind EnumDeserializer::deserializeCIRAwaitKind(CIRAwaitKind e) {
  switch (e) {
    case CIRAwaitKind::AwaitKind_Init:
      return cir::AwaitKind::init;
    case CIRAwaitKind::AwaitKind_User:
      return cir::AwaitKind::user;
    case CIRAwaitKind::AwaitKind_Yield:
      return cir::AwaitKind::yield;
    case CIRAwaitKind::AwaitKind_Final:
      return cir::AwaitKind::final;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::BinOpKind EnumDeserializer::deserializeCIRBinOpKind(CIRBinOpKind e) {
  switch (e) {
    case CIRBinOpKind::BinOpKind_Mul:
      return cir::BinOpKind::Mul;
    case CIRBinOpKind::BinOpKind_Div:
      return cir::BinOpKind::Div;
    case CIRBinOpKind::BinOpKind_Rem:
      return cir::BinOpKind::Rem;
    case CIRBinOpKind::BinOpKind_Add:
      return cir::BinOpKind::Add;
    case CIRBinOpKind::BinOpKind_Sub:
      return cir::BinOpKind::Sub;
    case CIRBinOpKind::BinOpKind_And:
      return cir::BinOpKind::And;
    case CIRBinOpKind::BinOpKind_Xor:
      return cir::BinOpKind::Xor;
    case CIRBinOpKind::BinOpKind_Or:
      return cir::BinOpKind::Or;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::BinOpOverflowKind EnumDeserializer::deserializeCIRBinOpOverflowKind(CIRBinOpOverflowKind e) {
  switch (e) {
    case CIRBinOpOverflowKind::BinOpOverflowKind_Add:
      return cir::BinOpOverflowKind::Add;
    case CIRBinOpOverflowKind::BinOpOverflowKind_Sub:
      return cir::BinOpOverflowKind::Sub;
    case CIRBinOpOverflowKind::BinOpOverflowKind_Mul:
      return cir::BinOpOverflowKind::Mul;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::CallingConv EnumDeserializer::deserializeCIRCallingConv(CIRCallingConv e) {
  switch (e) {
    case CIRCallingConv::CallingConv_C:
      return cir::CallingConv::C;
    case CIRCallingConv::CallingConv_SpirKernel:
      return cir::CallingConv::SpirKernel;
    case CIRCallingConv::CallingConv_SpirFunction:
      return cir::CallingConv::SpirFunction;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::CaseOpKind EnumDeserializer::deserializeCIRCaseOpKind(CIRCaseOpKind e) {
  switch (e) {
    case CIRCaseOpKind::CaseOpKind_Default:
      return cir::CaseOpKind::Default;
    case CIRCaseOpKind::CaseOpKind_Equal:
      return cir::CaseOpKind::Equal;
    case CIRCaseOpKind::CaseOpKind_Anyof:
      return cir::CaseOpKind::Anyof;
    case CIRCaseOpKind::CaseOpKind_Range:
      return cir::CaseOpKind::Range;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::CastKind EnumDeserializer::deserializeCIRCastKind(CIRCastKind e) {
  switch (e) {
    case CIRCastKind::CastKind_IntToBool:
      return cir::CastKind::int_to_bool;
    case CIRCastKind::CastKind_ArrayToPtrdecay:
      return cir::CastKind::array_to_ptrdecay;
    case CIRCastKind::CastKind_Integral:
      return cir::CastKind::integral;
    case CIRCastKind::CastKind_Bitcast:
      return cir::CastKind::bitcast;
    case CIRCastKind::CastKind_Floating:
      return cir::CastKind::floating;
    case CIRCastKind::CastKind_PtrToBool:
      return cir::CastKind::ptr_to_bool;
    case CIRCastKind::CastKind_FloatToInt:
      return cir::CastKind::float_to_int;
    case CIRCastKind::CastKind_IntToPtr:
      return cir::CastKind::int_to_ptr;
    case CIRCastKind::CastKind_PtrToInt:
      return cir::CastKind::ptr_to_int;
    case CIRCastKind::CastKind_FloatToBool:
      return cir::CastKind::float_to_bool;
    case CIRCastKind::CastKind_BoolToInt:
      return cir::CastKind::bool_to_int;
    case CIRCastKind::CastKind_IntToFloat:
      return cir::CastKind::int_to_float;
    case CIRCastKind::CastKind_BoolToFloat:
      return cir::CastKind::bool_to_float;
    case CIRCastKind::CastKind_AddressSpace:
      return cir::CastKind::address_space;
    case CIRCastKind::CastKind_FloatToComplex:
      return cir::CastKind::float_to_complex;
    case CIRCastKind::CastKind_IntToComplex:
      return cir::CastKind::int_to_complex;
    case CIRCastKind::CastKind_FloatComplexToReal:
      return cir::CastKind::float_complex_to_real;
    case CIRCastKind::CastKind_IntComplexToReal:
      return cir::CastKind::int_complex_to_real;
    case CIRCastKind::CastKind_FloatComplexToBool:
      return cir::CastKind::float_complex_to_bool;
    case CIRCastKind::CastKind_IntComplexToBool:
      return cir::CastKind::int_complex_to_bool;
    case CIRCastKind::CastKind_FloatComplex:
      return cir::CastKind::float_complex;
    case CIRCastKind::CastKind_FloatComplexToIntComplex:
      return cir::CastKind::float_complex_to_int_complex;
    case CIRCastKind::CastKind_IntComplex:
      return cir::CastKind::int_complex;
    case CIRCastKind::CastKind_IntComplexToFloatComplex:
      return cir::CastKind::int_complex_to_float_complex;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::CatchParamKind EnumDeserializer::deserializeCIRCatchParamKind(CIRCatchParamKind e) {
  switch (e) {
    case CIRCatchParamKind::CatchParamKind_Begin:
      return cir::CatchParamKind::begin;
    case CIRCatchParamKind::CatchParamKind_End:
      return cir::CatchParamKind::end;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::CmpOpKind EnumDeserializer::deserializeCIRCmpOpKind(CIRCmpOpKind e) {
  switch (e) {
    case CIRCmpOpKind::CmpOpKind_Lt:
      return cir::CmpOpKind::lt;
    case CIRCmpOpKind::CmpOpKind_Le:
      return cir::CmpOpKind::le;
    case CIRCmpOpKind::CmpOpKind_Gt:
      return cir::CmpOpKind::gt;
    case CIRCmpOpKind::CmpOpKind_Ge:
      return cir::CmpOpKind::ge;
    case CIRCmpOpKind::CmpOpKind_Eq:
      return cir::CmpOpKind::eq;
    case CIRCmpOpKind::CmpOpKind_Ne:
      return cir::CmpOpKind::ne;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::CmpOrdering EnumDeserializer::deserializeCIRCmpOrdering(CIRCmpOrdering e) {
  switch (e) {
    case CIRCmpOrdering::CmpOrdering_Strong:
      return cir::CmpOrdering::Strong;
    case CIRCmpOrdering::CmpOrdering_Partial:
      return cir::CmpOrdering::Partial;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::ComplexBinOpKind EnumDeserializer::deserializeCIRComplexBinOpKind(CIRComplexBinOpKind e) {
  switch (e) {
    case CIRComplexBinOpKind::ComplexBinOpKind_Mul:
      return cir::ComplexBinOpKind::Mul;
    case CIRComplexBinOpKind::ComplexBinOpKind_Div:
      return cir::ComplexBinOpKind::Div;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::ComplexRangeKind EnumDeserializer::deserializeCIRComplexRangeKind(CIRComplexRangeKind e) {
  switch (e) {
    case CIRComplexRangeKind::ComplexRangeKind_Full:
      return cir::ComplexRangeKind::Full;
    case CIRComplexRangeKind::ComplexRangeKind_Improved:
      return cir::ComplexRangeKind::Improved;
    case CIRComplexRangeKind::ComplexRangeKind_Promoted:
      return cir::ComplexRangeKind::Promoted;
    case CIRComplexRangeKind::ComplexRangeKind_Basic:
      return cir::ComplexRangeKind::Basic;
    case CIRComplexRangeKind::ComplexRangeKind_None:
      return cir::ComplexRangeKind::None;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::DynamicCastKind EnumDeserializer::deserializeCIRDynamicCastKind(CIRDynamicCastKind e) {
  switch (e) {
    case CIRDynamicCastKind::DynamicCastKind_Ptr:
      return cir::DynamicCastKind::ptr;
    case CIRDynamicCastKind::DynamicCastKind_Ref:
      return cir::DynamicCastKind::ref;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::GlobalLinkageKind EnumDeserializer::deserializeCIRGlobalLinkageKind(CIRGlobalLinkageKind e) {
  switch (e) {
    case CIRGlobalLinkageKind::GlobalLinkageKind_ExternalLinkage:
      return cir::GlobalLinkageKind::ExternalLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_AvailableExternallyLinkage:
      return cir::GlobalLinkageKind::AvailableExternallyLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_LinkOnceAnyLinkage:
      return cir::GlobalLinkageKind::LinkOnceAnyLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_LinkOnceODRLinkage:
      return cir::GlobalLinkageKind::LinkOnceODRLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_WeakAnyLinkage:
      return cir::GlobalLinkageKind::WeakAnyLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_WeakODRLinkage:
      return cir::GlobalLinkageKind::WeakODRLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_InternalLinkage:
      return cir::GlobalLinkageKind::InternalLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_PrivateLinkage:
      return cir::GlobalLinkageKind::PrivateLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_ExternalWeakLinkage:
      return cir::GlobalLinkageKind::ExternalWeakLinkage;
    case CIRGlobalLinkageKind::GlobalLinkageKind_CommonLinkage:
      return cir::GlobalLinkageKind::CommonLinkage;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::InlineKind EnumDeserializer::deserializeCIRInlineKind(CIRInlineKind e) {
  switch (e) {
    case CIRInlineKind::InlineKind_NoInline:
      return cir::InlineKind::NoInline;
    case CIRInlineKind::InlineKind_AlwaysInline:
      return cir::InlineKind::AlwaysInline;
    case CIRInlineKind::InlineKind_InlineHint:
      return cir::InlineKind::InlineHint;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::MemOrder EnumDeserializer::deserializeCIRMemOrder(CIRMemOrder e) {
  switch (e) {
    case CIRMemOrder::MemOrder_Relaxed:
      return cir::MemOrder::Relaxed;
    case CIRMemOrder::MemOrder_Consume:
      return cir::MemOrder::Consume;
    case CIRMemOrder::MemOrder_Acquire:
      return cir::MemOrder::Acquire;
    case CIRMemOrder::MemOrder_Release:
      return cir::MemOrder::Release;
    case CIRMemOrder::MemOrder_AcquireRelease:
      return cir::MemOrder::AcquireRelease;
    case CIRMemOrder::MemOrder_SequentiallyConsistent:
      return cir::MemOrder::SequentiallyConsistent;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::sob::SignedOverflowBehavior EnumDeserializer::deserializeCIRSignedOverflowBehavior(CIRSignedOverflowBehavior e) {
  switch (e) {
    case CIRSignedOverflowBehavior::SignedOverflowBehavior_Undefined:
      return cir::sob::SignedOverflowBehavior::undefined;
    case CIRSignedOverflowBehavior::SignedOverflowBehavior_Defined:
      return cir::sob::SignedOverflowBehavior::defined;
    case CIRSignedOverflowBehavior::SignedOverflowBehavior_Trapping:
      return cir::sob::SignedOverflowBehavior::trapping;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::SizeInfoType EnumDeserializer::deserializeCIRSizeInfoType(CIRSizeInfoType e) {
  switch (e) {
    case CIRSizeInfoType::SizeInfoType_Min:
      return cir::SizeInfoType::min;
    case CIRSizeInfoType::SizeInfoType_Max:
      return cir::SizeInfoType::max;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::SourceLanguage EnumDeserializer::deserializeCIRSourceLanguage(CIRSourceLanguage e) {
  switch (e) {
    case CIRSourceLanguage::SourceLanguage_C:
      return cir::SourceLanguage::C;
    case CIRSourceLanguage::SourceLanguage_CXX:
      return cir::SourceLanguage::CXX;
    case CIRSourceLanguage::SourceLanguage_OpenCLC:
      return cir::SourceLanguage::OpenCLC;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::TLS_Model EnumDeserializer::deserializeCIRTLSModel(CIRTLSModel e) {
  switch (e) {
    case CIRTLSModel::TLSModel_GeneralDynamic:
      return cir::TLS_Model::GeneralDynamic;
    case CIRTLSModel::TLSModel_LocalDynamic:
      return cir::TLS_Model::LocalDynamic;
    case CIRTLSModel::TLSModel_InitialExec:
      return cir::TLS_Model::InitialExec;
    case CIRTLSModel::TLSModel_LocalExec:
      return cir::TLS_Model::LocalExec;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::UnaryOpKind EnumDeserializer::deserializeCIRUnaryOpKind(CIRUnaryOpKind e) {
  switch (e) {
    case CIRUnaryOpKind::UnaryOpKind_Inc:
      return cir::UnaryOpKind::Inc;
    case CIRUnaryOpKind::UnaryOpKind_Dec:
      return cir::UnaryOpKind::Dec;
    case CIRUnaryOpKind::UnaryOpKind_Plus:
      return cir::UnaryOpKind::Plus;
    case CIRUnaryOpKind::UnaryOpKind_Minus:
      return cir::UnaryOpKind::Minus;
    case CIRUnaryOpKind::UnaryOpKind_Not:
      return cir::UnaryOpKind::Not;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::VisibilityKind EnumDeserializer::deserializeCIRVisibilityKind(CIRVisibilityKind e) {
  switch (e) {
    case CIRVisibilityKind::VisibilityKind_Default:
      return cir::VisibilityKind::Default;
    case CIRVisibilityKind::VisibilityKind_Hidden:
      return cir::VisibilityKind::Hidden;
    case CIRVisibilityKind::VisibilityKind_Protected:
      return cir::VisibilityKind::Protected;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
cir::StructType::RecordKind EnumDeserializer::deserializeCIRRecordKind(CIRRecordKind e) {
  switch (e) {
    case CIRRecordKind::CIRRecordKind_Class:
      return cir::StructType::RecordKind::Class;
    case CIRRecordKind::CIRRecordKind_Union:
      return cir::StructType::RecordKind::Union;
    case CIRRecordKind::CIRRecordKind_Struct:
      return cir::StructType::RecordKind::Struct;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
mlir::IntegerType::SignednessSemantics EnumDeserializer::deserializeMLIRSignednessSemantics(MLIRSignednessSemantics e) {
  switch (e) {
    case MLIRSignednessSemantics::MLIRSignednessSemantics_Signless:
      return mlir::IntegerType::SignednessSemantics::Signless;
    case MLIRSignednessSemantics::MLIRSignednessSemantics_Signed:
      return mlir::IntegerType::SignednessSemantics::Signed;
    case MLIRSignednessSemantics::MLIRSignednessSemantics_Unsigned:
      return mlir::IntegerType::SignednessSemantics::Unsigned;
    default:
      llvm_unreachable("Unexpected enum value!");
  }
}
// clang-format on
