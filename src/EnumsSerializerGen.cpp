/* Autogenerated by mlir-tblgen; don't manually edit. */

#include "cir-tac/EnumsSerializer.h"

using namespace protocir;

CIRAsmFlavor EnumSerializer::serializeAsmFlavor(::cir::AsmFlavor &cirKind) {
  switch (cirKind) {

  case ::cir::AsmFlavor::x86_att:
    return protocir::CIRAsmFlavor::AsmFlavor_x86_att;

  case ::cir::AsmFlavor::x86_intel:
    return protocir::CIRAsmFlavor::AsmFlavor_x86_intel;
  }
}

CIRAtomicFetchKind
EnumSerializer::serializeAtomicFetchKind(::cir::AtomicFetchKind &cirKind) {
  switch (cirKind) {

  case ::cir::AtomicFetchKind::Add:
    return protocir::CIRAtomicFetchKind::AtomicFetchKind_Add;

  case ::cir::AtomicFetchKind::Sub:
    return protocir::CIRAtomicFetchKind::AtomicFetchKind_Sub;

  case ::cir::AtomicFetchKind::And:
    return protocir::CIRAtomicFetchKind::AtomicFetchKind_And;

  case ::cir::AtomicFetchKind::Xor:
    return protocir::CIRAtomicFetchKind::AtomicFetchKind_Xor;

  case ::cir::AtomicFetchKind::Or:
    return protocir::CIRAtomicFetchKind::AtomicFetchKind_Or;

  case ::cir::AtomicFetchKind::Nand:
    return protocir::CIRAtomicFetchKind::AtomicFetchKind_Nand;

  case ::cir::AtomicFetchKind::Max:
    return protocir::CIRAtomicFetchKind::AtomicFetchKind_Max;

  case ::cir::AtomicFetchKind::Min:
    return protocir::CIRAtomicFetchKind::AtomicFetchKind_Min;
  }
}

CIRAwaitKind EnumSerializer::serializeAwaitKind(::cir::AwaitKind &cirKind) {
  switch (cirKind) {

  case ::cir::AwaitKind::init:
    return protocir::CIRAwaitKind::AwaitKind_init;

  case ::cir::AwaitKind::user:
    return protocir::CIRAwaitKind::AwaitKind_user;

  case ::cir::AwaitKind::yield:
    return protocir::CIRAwaitKind::AwaitKind_yield;

  case ::cir::AwaitKind::final:
    return protocir::CIRAwaitKind::AwaitKind_final;
  }
}

CIRBinOpKind EnumSerializer::serializeBinOpKind(::cir::BinOpKind &cirKind) {
  switch (cirKind) {

  case ::cir::BinOpKind::Mul:
    return protocir::CIRBinOpKind::BinOpKind_Mul;

  case ::cir::BinOpKind::Div:
    return protocir::CIRBinOpKind::BinOpKind_Div;

  case ::cir::BinOpKind::Rem:
    return protocir::CIRBinOpKind::BinOpKind_Rem;

  case ::cir::BinOpKind::Add:
    return protocir::CIRBinOpKind::BinOpKind_Add;

  case ::cir::BinOpKind::Sub:
    return protocir::CIRBinOpKind::BinOpKind_Sub;

  case ::cir::BinOpKind::And:
    return protocir::CIRBinOpKind::BinOpKind_And;

  case ::cir::BinOpKind::Xor:
    return protocir::CIRBinOpKind::BinOpKind_Xor;

  case ::cir::BinOpKind::Or:
    return protocir::CIRBinOpKind::BinOpKind_Or;
  }
}

CIRBinOpOverflowKind
EnumSerializer::serializeBinOpOverflowKind(::cir::BinOpOverflowKind &cirKind) {
  switch (cirKind) {

  case ::cir::BinOpOverflowKind::Add:
    return protocir::CIRBinOpOverflowKind::BinOpOverflowKind_Add;

  case ::cir::BinOpOverflowKind::Sub:
    return protocir::CIRBinOpOverflowKind::BinOpOverflowKind_Sub;

  case ::cir::BinOpOverflowKind::Mul:
    return protocir::CIRBinOpOverflowKind::BinOpOverflowKind_Mul;
  }
}

CIRCallingConv
EnumSerializer::serializeCallingConv(::cir::CallingConv &cirKind) {
  switch (cirKind) {

  case ::cir::CallingConv::C:
    return protocir::CIRCallingConv::CallingConv_C;

  case ::cir::CallingConv::SpirKernel:
    return protocir::CIRCallingConv::CallingConv_SpirKernel;

  case ::cir::CallingConv::SpirFunction:
    return protocir::CIRCallingConv::CallingConv_SpirFunction;
  }
}

CIRCaseOpKind EnumSerializer::serializeCaseOpKind(::cir::CaseOpKind &cirKind) {
  switch (cirKind) {

  case ::cir::CaseOpKind::Default:
    return protocir::CIRCaseOpKind::CaseOpKind_Default;

  case ::cir::CaseOpKind::Equal:
    return protocir::CIRCaseOpKind::CaseOpKind_Equal;

  case ::cir::CaseOpKind::Anyof:
    return protocir::CIRCaseOpKind::CaseOpKind_Anyof;

  case ::cir::CaseOpKind::Range:
    return protocir::CIRCaseOpKind::CaseOpKind_Range;
  }
}

CIRCastKind EnumSerializer::serializeCastKind(::cir::CastKind &cirKind) {
  switch (cirKind) {

  case ::cir::CastKind::int_to_bool:
    return protocir::CIRCastKind::CastKind_int_to_bool;

  case ::cir::CastKind::array_to_ptrdecay:
    return protocir::CIRCastKind::CastKind_array_to_ptrdecay;

  case ::cir::CastKind::integral:
    return protocir::CIRCastKind::CastKind_integral;

  case ::cir::CastKind::bitcast:
    return protocir::CIRCastKind::CastKind_bitcast;

  case ::cir::CastKind::floating:
    return protocir::CIRCastKind::CastKind_floating;

  case ::cir::CastKind::ptr_to_bool:
    return protocir::CIRCastKind::CastKind_ptr_to_bool;

  case ::cir::CastKind::float_to_int:
    return protocir::CIRCastKind::CastKind_float_to_int;

  case ::cir::CastKind::int_to_ptr:
    return protocir::CIRCastKind::CastKind_int_to_ptr;

  case ::cir::CastKind::ptr_to_int:
    return protocir::CIRCastKind::CastKind_ptr_to_int;

  case ::cir::CastKind::float_to_bool:
    return protocir::CIRCastKind::CastKind_float_to_bool;

  case ::cir::CastKind::bool_to_int:
    return protocir::CIRCastKind::CastKind_bool_to_int;

  case ::cir::CastKind::int_to_float:
    return protocir::CIRCastKind::CastKind_int_to_float;

  case ::cir::CastKind::bool_to_float:
    return protocir::CIRCastKind::CastKind_bool_to_float;

  case ::cir::CastKind::address_space:
    return protocir::CIRCastKind::CastKind_address_space;

  case ::cir::CastKind::float_to_complex:
    return protocir::CIRCastKind::CastKind_float_to_complex;

  case ::cir::CastKind::int_to_complex:
    return protocir::CIRCastKind::CastKind_int_to_complex;

  case ::cir::CastKind::float_complex_to_real:
    return protocir::CIRCastKind::CastKind_float_complex_to_real;

  case ::cir::CastKind::int_complex_to_real:
    return protocir::CIRCastKind::CastKind_int_complex_to_real;

  case ::cir::CastKind::float_complex_to_bool:
    return protocir::CIRCastKind::CastKind_float_complex_to_bool;

  case ::cir::CastKind::int_complex_to_bool:
    return protocir::CIRCastKind::CastKind_int_complex_to_bool;

  case ::cir::CastKind::float_complex:
    return protocir::CIRCastKind::CastKind_float_complex;

  case ::cir::CastKind::float_complex_to_int_complex:
    return protocir::CIRCastKind::CastKind_float_complex_to_int_complex;

  case ::cir::CastKind::int_complex:
    return protocir::CIRCastKind::CastKind_int_complex;

  case ::cir::CastKind::int_complex_to_float_complex:
    return protocir::CIRCastKind::CastKind_int_complex_to_float_complex;
  }
}

CIRCatchParamKind
EnumSerializer::serializeCatchParamKind(::cir::CatchParamKind &cirKind) {
  switch (cirKind) {

  case ::cir::CatchParamKind::begin:
    return protocir::CIRCatchParamKind::CatchParamKind_begin;

  case ::cir::CatchParamKind::end:
    return protocir::CIRCatchParamKind::CatchParamKind_end;
  }
}

CIRCmpOpKind EnumSerializer::serializeCmpOpKind(::cir::CmpOpKind &cirKind) {
  switch (cirKind) {

  case ::cir::CmpOpKind::lt:
    return protocir::CIRCmpOpKind::CmpOpKind_lt;

  case ::cir::CmpOpKind::le:
    return protocir::CIRCmpOpKind::CmpOpKind_le;

  case ::cir::CmpOpKind::gt:
    return protocir::CIRCmpOpKind::CmpOpKind_gt;

  case ::cir::CmpOpKind::ge:
    return protocir::CIRCmpOpKind::CmpOpKind_ge;

  case ::cir::CmpOpKind::eq:
    return protocir::CIRCmpOpKind::CmpOpKind_eq;

  case ::cir::CmpOpKind::ne:
    return protocir::CIRCmpOpKind::CmpOpKind_ne;
  }
}

CIRCmpOrdering
EnumSerializer::serializeCmpOrdering(::cir::CmpOrdering &cirKind) {
  switch (cirKind) {

  case ::cir::CmpOrdering::Strong:
    return protocir::CIRCmpOrdering::CmpOrdering_Strong;

  case ::cir::CmpOrdering::Partial:
    return protocir::CIRCmpOrdering::CmpOrdering_Partial;
  }
}

CIRComplexBinOpKind
EnumSerializer::serializeComplexBinOpKind(::cir::ComplexBinOpKind &cirKind) {
  switch (cirKind) {

  case ::cir::ComplexBinOpKind::Mul:
    return protocir::CIRComplexBinOpKind::ComplexBinOpKind_Mul;

  case ::cir::ComplexBinOpKind::Div:
    return protocir::CIRComplexBinOpKind::ComplexBinOpKind_Div;
  }
}

CIRComplexRangeKind
EnumSerializer::serializeComplexRangeKind(::cir::ComplexRangeKind &cirKind) {
  switch (cirKind) {

  case ::cir::ComplexRangeKind::Full:
    return protocir::CIRComplexRangeKind::ComplexRangeKind_Full;

  case ::cir::ComplexRangeKind::Improved:
    return protocir::CIRComplexRangeKind::ComplexRangeKind_Improved;

  case ::cir::ComplexRangeKind::Promoted:
    return protocir::CIRComplexRangeKind::ComplexRangeKind_Promoted;

  case ::cir::ComplexRangeKind::Basic:
    return protocir::CIRComplexRangeKind::ComplexRangeKind_Basic;

  case ::cir::ComplexRangeKind::None:
    return protocir::CIRComplexRangeKind::ComplexRangeKind_None;
  }
}

CIRDynamicCastKind
EnumSerializer::serializeDynamicCastKind(::cir::DynamicCastKind &cirKind) {
  switch (cirKind) {

  case ::cir::DynamicCastKind::ptr:
    return protocir::CIRDynamicCastKind::DynamicCastKind_ptr;

  case ::cir::DynamicCastKind::ref:
    return protocir::CIRDynamicCastKind::DynamicCastKind_ref;
  }
}

CIRGlobalLinkageKind
EnumSerializer::serializeGlobalLinkageKind(::cir::GlobalLinkageKind &cirKind) {
  switch (cirKind) {

  case ::cir::GlobalLinkageKind::ExternalLinkage:
    return protocir::CIRGlobalLinkageKind::GlobalLinkageKind_ExternalLinkage;

  case ::cir::GlobalLinkageKind::AvailableExternallyLinkage:
    return protocir::CIRGlobalLinkageKind::
        GlobalLinkageKind_AvailableExternallyLinkage;

  case ::cir::GlobalLinkageKind::LinkOnceAnyLinkage:
    return protocir::CIRGlobalLinkageKind::GlobalLinkageKind_LinkOnceAnyLinkage;

  case ::cir::GlobalLinkageKind::LinkOnceODRLinkage:
    return protocir::CIRGlobalLinkageKind::GlobalLinkageKind_LinkOnceODRLinkage;

  case ::cir::GlobalLinkageKind::WeakAnyLinkage:
    return protocir::CIRGlobalLinkageKind::GlobalLinkageKind_WeakAnyLinkage;

  case ::cir::GlobalLinkageKind::WeakODRLinkage:
    return protocir::CIRGlobalLinkageKind::GlobalLinkageKind_WeakODRLinkage;

  case ::cir::GlobalLinkageKind::InternalLinkage:
    return protocir::CIRGlobalLinkageKind::GlobalLinkageKind_InternalLinkage;

  case ::cir::GlobalLinkageKind::PrivateLinkage:
    return protocir::CIRGlobalLinkageKind::GlobalLinkageKind_PrivateLinkage;

  case ::cir::GlobalLinkageKind::ExternalWeakLinkage:
    return protocir::CIRGlobalLinkageKind::
        GlobalLinkageKind_ExternalWeakLinkage;

  case ::cir::GlobalLinkageKind::CommonLinkage:
    return protocir::CIRGlobalLinkageKind::GlobalLinkageKind_CommonLinkage;
  }
}

CIRInlineKind EnumSerializer::serializeInlineKind(::cir::InlineKind &cirKind) {
  switch (cirKind) {

  case ::cir::InlineKind::NoInline:
    return protocir::CIRInlineKind::InlineKind_NoInline;

  case ::cir::InlineKind::AlwaysInline:
    return protocir::CIRInlineKind::InlineKind_AlwaysInline;

  case ::cir::InlineKind::InlineHint:
    return protocir::CIRInlineKind::InlineKind_InlineHint;
  }
}

CIRMemOrder EnumSerializer::serializeMemOrder(::cir::MemOrder &cirKind) {
  switch (cirKind) {

  case ::cir::MemOrder::Relaxed:
    return protocir::CIRMemOrder::MemOrder_Relaxed;

  case ::cir::MemOrder::Consume:
    return protocir::CIRMemOrder::MemOrder_Consume;

  case ::cir::MemOrder::Acquire:
    return protocir::CIRMemOrder::MemOrder_Acquire;

  case ::cir::MemOrder::Release:
    return protocir::CIRMemOrder::MemOrder_Release;

  case ::cir::MemOrder::AcquireRelease:
    return protocir::CIRMemOrder::MemOrder_AcquireRelease;

  case ::cir::MemOrder::SequentiallyConsistent:
    return protocir::CIRMemOrder::MemOrder_SequentiallyConsistent;
  }
}

CIRSignedOverflowBehavior EnumSerializer::serializeSignedOverflowBehavior(
    ::cir::sob::SignedOverflowBehavior &cirKind) {
  switch (cirKind) {

  case ::cir::sob::SignedOverflowBehavior::undefined:
    return protocir::CIRSignedOverflowBehavior::
        SignedOverflowBehavior_undefined;

  case ::cir::sob::SignedOverflowBehavior::defined:
    return protocir::CIRSignedOverflowBehavior::SignedOverflowBehavior_defined;

  case ::cir::sob::SignedOverflowBehavior::trapping:
    return protocir::CIRSignedOverflowBehavior::SignedOverflowBehavior_trapping;
  }
}

CIRSizeInfoType
EnumSerializer::serializeSizeInfoType(::cir::SizeInfoType &cirKind) {
  switch (cirKind) {

  case ::cir::SizeInfoType::min:
    return protocir::CIRSizeInfoType::SizeInfoType_min;

  case ::cir::SizeInfoType::max:
    return protocir::CIRSizeInfoType::SizeInfoType_max;
  }
}

CIRSourceLanguage
EnumSerializer::serializeSourceLanguage(::cir::SourceLanguage &cirKind) {
  switch (cirKind) {

  case ::cir::SourceLanguage::C:
    return protocir::CIRSourceLanguage::SourceLanguage_C;

  case ::cir::SourceLanguage::CXX:
    return protocir::CIRSourceLanguage::SourceLanguage_CXX;

  case ::cir::SourceLanguage::OpenCLC:
    return protocir::CIRSourceLanguage::SourceLanguage_OpenCLC;
  }
}

CIRTLS_Model EnumSerializer::serializeTLS_Model(::cir::TLS_Model &cirKind) {
  switch (cirKind) {

  case ::cir::TLS_Model::GeneralDynamic:
    return protocir::CIRTLS_Model::TLS_Model_GeneralDynamic;

  case ::cir::TLS_Model::LocalDynamic:
    return protocir::CIRTLS_Model::TLS_Model_LocalDynamic;

  case ::cir::TLS_Model::InitialExec:
    return protocir::CIRTLS_Model::TLS_Model_InitialExec;

  case ::cir::TLS_Model::LocalExec:
    return protocir::CIRTLS_Model::TLS_Model_LocalExec;
  }
}

CIRUnaryOpKind
EnumSerializer::serializeUnaryOpKind(::cir::UnaryOpKind &cirKind) {
  switch (cirKind) {

  case ::cir::UnaryOpKind::Inc:
    return protocir::CIRUnaryOpKind::UnaryOpKind_Inc;

  case ::cir::UnaryOpKind::Dec:
    return protocir::CIRUnaryOpKind::UnaryOpKind_Dec;

  case ::cir::UnaryOpKind::Plus:
    return protocir::CIRUnaryOpKind::UnaryOpKind_Plus;

  case ::cir::UnaryOpKind::Minus:
    return protocir::CIRUnaryOpKind::UnaryOpKind_Minus;

  case ::cir::UnaryOpKind::Not:
    return protocir::CIRUnaryOpKind::UnaryOpKind_Not;
  }
}

CIRVisibilityKind
EnumSerializer::serializeVisibilityKind(::cir::VisibilityKind &cirKind) {
  switch (cirKind) {

  case ::cir::VisibilityKind::Default:
    return protocir::CIRVisibilityKind::VisibilityKind_Default;

  case ::cir::VisibilityKind::Hidden:
    return protocir::CIRVisibilityKind::VisibilityKind_Hidden;

  case ::cir::VisibilityKind::Protected:
    return protocir::CIRVisibilityKind::VisibilityKind_Protected;
  }
}
