/* Autogenerated by mlir-tblgen; don't manually edit. */

#include "cir-tac/EnumsDeserializer.h"

namespace protocir {

::cir::AsmFlavor
EnumDeserializer::deserializeAsmFlavor(CIRAsmFlavor &pKind) {
  switch (pKind) {
    case protocir::CIRAsmFlavor::AsmFlavor_X86Att:
      return ::cir::AsmFlavor::x86_att;

    case protocir::CIRAsmFlavor::AsmFlavor_X86Intel:
      return ::cir::AsmFlavor::x86_intel;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::AtomicFetchKind
EnumDeserializer::deserializeAtomicFetchKind(CIRAtomicFetchKind &pKind) {
  switch (pKind) {
    case protocir::CIRAtomicFetchKind::AtomicFetchKind_Add:
      return ::cir::AtomicFetchKind::Add;

    case protocir::CIRAtomicFetchKind::AtomicFetchKind_Sub:
      return ::cir::AtomicFetchKind::Sub;

    case protocir::CIRAtomicFetchKind::AtomicFetchKind_And:
      return ::cir::AtomicFetchKind::And;

    case protocir::CIRAtomicFetchKind::AtomicFetchKind_Xor:
      return ::cir::AtomicFetchKind::Xor;

    case protocir::CIRAtomicFetchKind::AtomicFetchKind_Or:
      return ::cir::AtomicFetchKind::Or;

    case protocir::CIRAtomicFetchKind::AtomicFetchKind_Nand:
      return ::cir::AtomicFetchKind::Nand;

    case protocir::CIRAtomicFetchKind::AtomicFetchKind_Max:
      return ::cir::AtomicFetchKind::Max;

    case protocir::CIRAtomicFetchKind::AtomicFetchKind_Min:
      return ::cir::AtomicFetchKind::Min;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::AwaitKind
EnumDeserializer::deserializeAwaitKind(CIRAwaitKind &pKind) {
  switch (pKind) {
    case protocir::CIRAwaitKind::AwaitKind_Init:
      return ::cir::AwaitKind::init;

    case protocir::CIRAwaitKind::AwaitKind_User:
      return ::cir::AwaitKind::user;

    case protocir::CIRAwaitKind::AwaitKind_Yield:
      return ::cir::AwaitKind::yield;

    case protocir::CIRAwaitKind::AwaitKind_Final:
      return ::cir::AwaitKind::final;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::BinOpKind
EnumDeserializer::deserializeBinOpKind(CIRBinOpKind &pKind) {
  switch (pKind) {
    case protocir::CIRBinOpKind::BinOpKind_Mul:
      return ::cir::BinOpKind::Mul;

    case protocir::CIRBinOpKind::BinOpKind_Div:
      return ::cir::BinOpKind::Div;

    case protocir::CIRBinOpKind::BinOpKind_Rem:
      return ::cir::BinOpKind::Rem;

    case protocir::CIRBinOpKind::BinOpKind_Add:
      return ::cir::BinOpKind::Add;

    case protocir::CIRBinOpKind::BinOpKind_Sub:
      return ::cir::BinOpKind::Sub;

    case protocir::CIRBinOpKind::BinOpKind_And:
      return ::cir::BinOpKind::And;

    case protocir::CIRBinOpKind::BinOpKind_Xor:
      return ::cir::BinOpKind::Xor;

    case protocir::CIRBinOpKind::BinOpKind_Or:
      return ::cir::BinOpKind::Or;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::BinOpOverflowKind
EnumDeserializer::deserializeBinOpOverflowKind(CIRBinOpOverflowKind &pKind) {
  switch (pKind) {
    case protocir::CIRBinOpOverflowKind::BinOpOverflowKind_Add:
      return ::cir::BinOpOverflowKind::Add;

    case protocir::CIRBinOpOverflowKind::BinOpOverflowKind_Sub:
      return ::cir::BinOpOverflowKind::Sub;

    case protocir::CIRBinOpOverflowKind::BinOpOverflowKind_Mul:
      return ::cir::BinOpOverflowKind::Mul;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::CallingConv
EnumDeserializer::deserializeCallingConv(CIRCallingConv &pKind) {
  switch (pKind) {
    case protocir::CIRCallingConv::CallingConv_C:
      return ::cir::CallingConv::C;

    case protocir::CIRCallingConv::CallingConv_SpirKernel:
      return ::cir::CallingConv::SpirKernel;

    case protocir::CIRCallingConv::CallingConv_SpirFunction:
      return ::cir::CallingConv::SpirFunction;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::CaseOpKind
EnumDeserializer::deserializeCaseOpKind(CIRCaseOpKind &pKind) {
  switch (pKind) {
    case protocir::CIRCaseOpKind::CaseOpKind_Default:
      return ::cir::CaseOpKind::Default;

    case protocir::CIRCaseOpKind::CaseOpKind_Equal:
      return ::cir::CaseOpKind::Equal;

    case protocir::CIRCaseOpKind::CaseOpKind_Anyof:
      return ::cir::CaseOpKind::Anyof;

    case protocir::CIRCaseOpKind::CaseOpKind_Range:
      return ::cir::CaseOpKind::Range;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::CastKind
EnumDeserializer::deserializeCastKind(CIRCastKind &pKind) {
  switch (pKind) {
    case protocir::CIRCastKind::CastKind_IntToBool:
      return ::cir::CastKind::int_to_bool;

    case protocir::CIRCastKind::CastKind_ArrayToPtrdecay:
      return ::cir::CastKind::array_to_ptrdecay;

    case protocir::CIRCastKind::CastKind_Integral:
      return ::cir::CastKind::integral;

    case protocir::CIRCastKind::CastKind_Bitcast:
      return ::cir::CastKind::bitcast;

    case protocir::CIRCastKind::CastKind_Floating:
      return ::cir::CastKind::floating;

    case protocir::CIRCastKind::CastKind_PtrToBool:
      return ::cir::CastKind::ptr_to_bool;

    case protocir::CIRCastKind::CastKind_FloatToInt:
      return ::cir::CastKind::float_to_int;

    case protocir::CIRCastKind::CastKind_IntToPtr:
      return ::cir::CastKind::int_to_ptr;

    case protocir::CIRCastKind::CastKind_PtrToInt:
      return ::cir::CastKind::ptr_to_int;

    case protocir::CIRCastKind::CastKind_FloatToBool:
      return ::cir::CastKind::float_to_bool;

    case protocir::CIRCastKind::CastKind_BoolToInt:
      return ::cir::CastKind::bool_to_int;

    case protocir::CIRCastKind::CastKind_IntToFloat:
      return ::cir::CastKind::int_to_float;

    case protocir::CIRCastKind::CastKind_BoolToFloat:
      return ::cir::CastKind::bool_to_float;

    case protocir::CIRCastKind::CastKind_AddressSpace:
      return ::cir::CastKind::address_space;

    case protocir::CIRCastKind::CastKind_FloatToComplex:
      return ::cir::CastKind::float_to_complex;

    case protocir::CIRCastKind::CastKind_IntToComplex:
      return ::cir::CastKind::int_to_complex;

    case protocir::CIRCastKind::CastKind_FloatComplexToReal:
      return ::cir::CastKind::float_complex_to_real;

    case protocir::CIRCastKind::CastKind_IntComplexToReal:
      return ::cir::CastKind::int_complex_to_real;

    case protocir::CIRCastKind::CastKind_FloatComplexToBool:
      return ::cir::CastKind::float_complex_to_bool;

    case protocir::CIRCastKind::CastKind_IntComplexToBool:
      return ::cir::CastKind::int_complex_to_bool;

    case protocir::CIRCastKind::CastKind_FloatComplex:
      return ::cir::CastKind::float_complex;

    case protocir::CIRCastKind::CastKind_FloatComplexToIntComplex:
      return ::cir::CastKind::float_complex_to_int_complex;

    case protocir::CIRCastKind::CastKind_IntComplex:
      return ::cir::CastKind::int_complex;

    case protocir::CIRCastKind::CastKind_IntComplexToFloatComplex:
      return ::cir::CastKind::int_complex_to_float_complex;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::CatchParamKind
EnumDeserializer::deserializeCatchParamKind(CIRCatchParamKind &pKind) {
  switch (pKind) {
    case protocir::CIRCatchParamKind::CatchParamKind_Begin:
      return ::cir::CatchParamKind::begin;

    case protocir::CIRCatchParamKind::CatchParamKind_End:
      return ::cir::CatchParamKind::end;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::CmpOpKind
EnumDeserializer::deserializeCmpOpKind(CIRCmpOpKind &pKind) {
  switch (pKind) {
    case protocir::CIRCmpOpKind::CmpOpKind_Lt:
      return ::cir::CmpOpKind::lt;

    case protocir::CIRCmpOpKind::CmpOpKind_Le:
      return ::cir::CmpOpKind::le;

    case protocir::CIRCmpOpKind::CmpOpKind_Gt:
      return ::cir::CmpOpKind::gt;

    case protocir::CIRCmpOpKind::CmpOpKind_Ge:
      return ::cir::CmpOpKind::ge;

    case protocir::CIRCmpOpKind::CmpOpKind_Eq:
      return ::cir::CmpOpKind::eq;

    case protocir::CIRCmpOpKind::CmpOpKind_Ne:
      return ::cir::CmpOpKind::ne;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::CmpOrdering
EnumDeserializer::deserializeCmpOrdering(CIRCmpOrdering &pKind) {
  switch (pKind) {
    case protocir::CIRCmpOrdering::CmpOrdering_Strong:
      return ::cir::CmpOrdering::Strong;

    case protocir::CIRCmpOrdering::CmpOrdering_Partial:
      return ::cir::CmpOrdering::Partial;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::ComplexBinOpKind
EnumDeserializer::deserializeComplexBinOpKind(CIRComplexBinOpKind &pKind) {
  switch (pKind) {
    case protocir::CIRComplexBinOpKind::ComplexBinOpKind_Mul:
      return ::cir::ComplexBinOpKind::Mul;

    case protocir::CIRComplexBinOpKind::ComplexBinOpKind_Div:
      return ::cir::ComplexBinOpKind::Div;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::ComplexRangeKind
EnumDeserializer::deserializeComplexRangeKind(CIRComplexRangeKind &pKind) {
  switch (pKind) {
    case protocir::CIRComplexRangeKind::ComplexRangeKind_Full:
      return ::cir::ComplexRangeKind::Full;

    case protocir::CIRComplexRangeKind::ComplexRangeKind_Improved:
      return ::cir::ComplexRangeKind::Improved;

    case protocir::CIRComplexRangeKind::ComplexRangeKind_Promoted:
      return ::cir::ComplexRangeKind::Promoted;

    case protocir::CIRComplexRangeKind::ComplexRangeKind_Basic:
      return ::cir::ComplexRangeKind::Basic;

    case protocir::CIRComplexRangeKind::ComplexRangeKind_None:
      return ::cir::ComplexRangeKind::None;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::DynamicCastKind
EnumDeserializer::deserializeDynamicCastKind(CIRDynamicCastKind &pKind) {
  switch (pKind) {
    case protocir::CIRDynamicCastKind::DynamicCastKind_Ptr:
      return ::cir::DynamicCastKind::ptr;

    case protocir::CIRDynamicCastKind::DynamicCastKind_Ref:
      return ::cir::DynamicCastKind::ref;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::GlobalLinkageKind
EnumDeserializer::deserializeGlobalLinkageKind(CIRGlobalLinkageKind &pKind) {
  switch (pKind) {
    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_ExternalLinkage:
      return ::cir::GlobalLinkageKind::ExternalLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_AvailableExternallyLinkage:
      return ::cir::GlobalLinkageKind::AvailableExternallyLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_LinkOnceAnyLinkage:
      return ::cir::GlobalLinkageKind::LinkOnceAnyLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_LinkOnceODRLinkage:
      return ::cir::GlobalLinkageKind::LinkOnceODRLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_WeakAnyLinkage:
      return ::cir::GlobalLinkageKind::WeakAnyLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_WeakODRLinkage:
      return ::cir::GlobalLinkageKind::WeakODRLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_InternalLinkage:
      return ::cir::GlobalLinkageKind::InternalLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_PrivateLinkage:
      return ::cir::GlobalLinkageKind::PrivateLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_ExternalWeakLinkage:
      return ::cir::GlobalLinkageKind::ExternalWeakLinkage;

    case protocir::CIRGlobalLinkageKind::GlobalLinkageKind_CommonLinkage:
      return ::cir::GlobalLinkageKind::CommonLinkage;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::InlineKind
EnumDeserializer::deserializeInlineKind(CIRInlineKind &pKind) {
  switch (pKind) {
    case protocir::CIRInlineKind::InlineKind_NoInline:
      return ::cir::InlineKind::NoInline;

    case protocir::CIRInlineKind::InlineKind_AlwaysInline:
      return ::cir::InlineKind::AlwaysInline;

    case protocir::CIRInlineKind::InlineKind_InlineHint:
      return ::cir::InlineKind::InlineHint;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::MemOrder
EnumDeserializer::deserializeMemOrder(CIRMemOrder &pKind) {
  switch (pKind) {
    case protocir::CIRMemOrder::MemOrder_Relaxed:
      return ::cir::MemOrder::Relaxed;

    case protocir::CIRMemOrder::MemOrder_Consume:
      return ::cir::MemOrder::Consume;

    case protocir::CIRMemOrder::MemOrder_Acquire:
      return ::cir::MemOrder::Acquire;

    case protocir::CIRMemOrder::MemOrder_Release:
      return ::cir::MemOrder::Release;

    case protocir::CIRMemOrder::MemOrder_AcquireRelease:
      return ::cir::MemOrder::AcquireRelease;

    case protocir::CIRMemOrder::MemOrder_SequentiallyConsistent:
      return ::cir::MemOrder::SequentiallyConsistent;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::sob::SignedOverflowBehavior
EnumDeserializer::deserializeSignedOverflowBehavior(CIRSignedOverflowBehavior &pKind) {
  switch (pKind) {
    case protocir::CIRSignedOverflowBehavior::SignedOverflowBehavior_Undefined:
      return ::cir::sob::SignedOverflowBehavior::undefined;

    case protocir::CIRSignedOverflowBehavior::SignedOverflowBehavior_Defined:
      return ::cir::sob::SignedOverflowBehavior::defined;

    case protocir::CIRSignedOverflowBehavior::SignedOverflowBehavior_Trapping:
      return ::cir::sob::SignedOverflowBehavior::trapping;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::SizeInfoType
EnumDeserializer::deserializeSizeInfoType(CIRSizeInfoType &pKind) {
  switch (pKind) {
    case protocir::CIRSizeInfoType::SizeInfoType_Min:
      return ::cir::SizeInfoType::min;

    case protocir::CIRSizeInfoType::SizeInfoType_Max:
      return ::cir::SizeInfoType::max;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::SourceLanguage
EnumDeserializer::deserializeSourceLanguage(CIRSourceLanguage &pKind) {
  switch (pKind) {
    case protocir::CIRSourceLanguage::SourceLanguage_C:
      return ::cir::SourceLanguage::C;

    case protocir::CIRSourceLanguage::SourceLanguage_CXX:
      return ::cir::SourceLanguage::CXX;

    case protocir::CIRSourceLanguage::SourceLanguage_OpenCLC:
      return ::cir::SourceLanguage::OpenCLC;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::TLS_Model
EnumDeserializer::deserializeTLS_Model(CIRTLS_Model &pKind) {
  switch (pKind) {
    case protocir::CIRTLS_Model::TLS_Model_GeneralDynamic:
      return ::cir::TLS_Model::GeneralDynamic;

    case protocir::CIRTLS_Model::TLS_Model_LocalDynamic:
      return ::cir::TLS_Model::LocalDynamic;

    case protocir::CIRTLS_Model::TLS_Model_InitialExec:
      return ::cir::TLS_Model::InitialExec;

    case protocir::CIRTLS_Model::TLS_Model_LocalExec:
      return ::cir::TLS_Model::LocalExec;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::UnaryOpKind
EnumDeserializer::deserializeUnaryOpKind(CIRUnaryOpKind &pKind) {
  switch (pKind) {
    case protocir::CIRUnaryOpKind::UnaryOpKind_Inc:
      return ::cir::UnaryOpKind::Inc;

    case protocir::CIRUnaryOpKind::UnaryOpKind_Dec:
      return ::cir::UnaryOpKind::Dec;

    case protocir::CIRUnaryOpKind::UnaryOpKind_Plus:
      return ::cir::UnaryOpKind::Plus;

    case protocir::CIRUnaryOpKind::UnaryOpKind_Minus:
      return ::cir::UnaryOpKind::Minus;

    case protocir::CIRUnaryOpKind::UnaryOpKind_Not:
      return ::cir::UnaryOpKind::Not;

    default:
      llvm_unreachable("NYI");
  }
}

::cir::VisibilityKind
EnumDeserializer::deserializeVisibilityKind(CIRVisibilityKind &pKind) {
  switch (pKind) {
    case protocir::CIRVisibilityKind::VisibilityKind_Default:
      return ::cir::VisibilityKind::Default;

    case protocir::CIRVisibilityKind::VisibilityKind_Hidden:
      return ::cir::VisibilityKind::Hidden;

    case protocir::CIRVisibilityKind::VisibilityKind_Protected:
      return ::cir::VisibilityKind::Protected;

    default:
      llvm_unreachable("NYI");
  }
}

} // namespace: protocir
