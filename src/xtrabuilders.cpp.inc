/* Autogenerated by mlir-tblgen; don't manually edit. */
void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::Type addr, /*optional*/::mlir::Value dynAllocSize, ::mlir::TypeAttr allocaType, ::mlir::StringAttr name, /*optional*/::mlir::UnitAttr init, /*optional*/::mlir::UnitAttr constant, /*optional*/::mlir::IntegerAttr alignment, /*optional*/::mlir::ArrayAttr annotations, /*optional*/::cir::ASTVarDeclInterface ast) {
  if (dynAllocSize)
    odsState.addOperands(dynAllocSize);
  odsState.getOrAddProperties<Properties>().allocaType = allocaType;
  odsState.getOrAddProperties<Properties>().name = name;
  if (init) {
    odsState.getOrAddProperties<Properties>().init = init;
  }
  if (constant) {
    odsState.getOrAddProperties<Properties>().constant = constant;
  }
  if (alignment) {
    odsState.getOrAddProperties<Properties>().alignment = alignment;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  odsState.addTypes(addr);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, /*optional*/::mlir::Value dynAllocSize, ::mlir::TypeAttr allocaType, ::mlir::StringAttr name, /*optional*/::mlir::UnitAttr init, /*optional*/::mlir::UnitAttr constant, /*optional*/::mlir::IntegerAttr alignment, /*optional*/::mlir::ArrayAttr annotations, /*optional*/::cir::ASTVarDeclInterface ast) {
  if (dynAllocSize)
    odsState.addOperands(dynAllocSize);
  odsState.getOrAddProperties<Properties>().allocaType = allocaType;
  odsState.getOrAddProperties<Properties>().name = name;
  if (init) {
    odsState.getOrAddProperties<Properties>().init = init;
  }
  if (constant) {
    odsState.getOrAddProperties<Properties>().constant = constant;
  }
  if (alignment) {
    odsState.getOrAddProperties<Properties>().alignment = alignment;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  assert(resultTypes.size() == 1u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::Type addr, /*optional*/::mlir::Value dynAllocSize, ::mlir::Type allocaType, ::llvm::StringRef name, /*optional*/bool init, /*optional*/bool constant, /*optional*/::mlir::IntegerAttr alignment, /*optional*/::mlir::ArrayAttr annotations, /*optional*/::cir::ASTVarDeclInterface ast) {
  if (dynAllocSize)
    odsState.addOperands(dynAllocSize);
  odsState.getOrAddProperties<Properties>().allocaType = ::mlir::TypeAttr::get(allocaType);
  odsState.getOrAddProperties<Properties>().name = odsBuilder.getStringAttr(name);
  if (init) {
    odsState.getOrAddProperties<Properties>().init = ((init) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (constant) {
    odsState.getOrAddProperties<Properties>().constant = ((constant) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (alignment) {
    odsState.getOrAddProperties<Properties>().alignment = alignment;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  odsState.addTypes(addr);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, /*optional*/::mlir::Value dynAllocSize, ::mlir::Type allocaType, ::llvm::StringRef name, /*optional*/bool init, /*optional*/bool constant, /*optional*/::mlir::IntegerAttr alignment, /*optional*/::mlir::ArrayAttr annotations, /*optional*/::cir::ASTVarDeclInterface ast) {
  if (dynAllocSize)
    odsState.addOperands(dynAllocSize);
  odsState.getOrAddProperties<Properties>().allocaType = ::mlir::TypeAttr::get(allocaType);
  odsState.getOrAddProperties<Properties>().name = odsBuilder.getStringAttr(name);
  if (init) {
    odsState.getOrAddProperties<Properties>().init = ((init) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (constant) {
    odsState.getOrAddProperties<Properties>().constant = ((constant) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (alignment) {
    odsState.getOrAddProperties<Properties>().alignment = alignment;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  assert(resultTypes.size() == 1u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::cir::AwaitKindAttr kind) {
  odsState.getOrAddProperties<Properties>().kind = kind;
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::cir::AwaitKindAttr kind) {
  odsState.getOrAddProperties<Properties>().kind = kind;
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::cir::AwaitKind kind) {
  odsState.getOrAddProperties<Properties>().kind = ::cir::AwaitKindAttr::get(odsBuilder.getContext(), kind);
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::cir::AwaitKind kind) {
  odsState.getOrAddProperties<Properties>().kind = ::cir::AwaitKindAttr::get(odsBuilder.getContext(), kind);
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, /*optional*/::mlir::Type result, /*optional*/::mlir::UnitAttr exception, /*optional*/::mlir::FlatSymbolRefAttr callee, ::mlir::ValueRange arg_ops, ::cir::CallingConvAttr calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::cir::ASTCallExprInterface ast) {
  odsState.addOperands(arg_ops);
  if (exception) {
    odsState.getOrAddProperties<Properties>().exception = exception;
  }
  if (callee) {
    odsState.getOrAddProperties<Properties>().callee = callee;
  }
  if (calling_conv) {
    odsState.getOrAddProperties<Properties>().calling_conv = calling_conv;
  }
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  (void)odsState.addRegion();
  if (result)
    odsState.addTypes(result);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, /*optional*/::mlir::UnitAttr exception, /*optional*/::mlir::FlatSymbolRefAttr callee, ::mlir::ValueRange arg_ops, ::cir::CallingConvAttr calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::cir::ASTCallExprInterface ast) {
  odsState.addOperands(arg_ops);
  if (exception) {
    odsState.getOrAddProperties<Properties>().exception = exception;
  }
  if (callee) {
    odsState.getOrAddProperties<Properties>().callee = callee;
  }
  if (calling_conv) {
    odsState.getOrAddProperties<Properties>().calling_conv = calling_conv;
  }
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  (void)odsState.addRegion();
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, /*optional*/::mlir::Type result, /*optional*/bool exception, /*optional*/::mlir::FlatSymbolRefAttr callee, ::mlir::ValueRange arg_ops, ::cir::CallingConv calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::cir::ASTCallExprInterface ast) {
  odsState.addOperands(arg_ops);
  if (exception) {
    odsState.getOrAddProperties<Properties>().exception = ((exception) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (callee) {
    odsState.getOrAddProperties<Properties>().callee = callee;
  }
  odsState.getOrAddProperties<Properties>().calling_conv = ::cir::CallingConvAttr::get(odsBuilder.getContext(), calling_conv);
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  (void)odsState.addRegion();
  if (result)
    odsState.addTypes(result);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, /*optional*/bool exception, /*optional*/::mlir::FlatSymbolRefAttr callee, ::mlir::ValueRange arg_ops, ::cir::CallingConv calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::cir::ASTCallExprInterface ast) {
  odsState.addOperands(arg_ops);
  if (exception) {
    odsState.getOrAddProperties<Properties>().exception = ((exception) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (callee) {
    odsState.getOrAddProperties<Properties>().callee = callee;
  }
  odsState.getOrAddProperties<Properties>().calling_conv = ::cir::CallingConvAttr::get(odsBuilder.getContext(), calling_conv);
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  (void)odsState.addRegion();
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::ArrayAttr value, ::cir::CaseOpKindAttr kind) {
  odsState.getOrAddProperties<Properties>().value = value;
  odsState.getOrAddProperties<Properties>().kind = kind;
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::ArrayAttr value, ::cir::CaseOpKindAttr kind) {
  odsState.getOrAddProperties<Properties>().value = value;
  odsState.getOrAddProperties<Properties>().kind = kind;
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::ArrayAttr value, ::cir::CaseOpKind kind) {
  odsState.getOrAddProperties<Properties>().value = value;
  odsState.getOrAddProperties<Properties>().kind = ::cir::CaseOpKindAttr::get(odsBuilder.getContext(), kind);
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::ArrayAttr value, ::cir::CaseOpKind kind) {
  odsState.getOrAddProperties<Properties>().value = value;
  odsState.getOrAddProperties<Properties>().kind = ::cir::CaseOpKindAttr::get(odsBuilder.getContext(), kind);
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::StringAttr sym_name, ::cir::VisibilityAttr global_visibility, ::mlir::TypeAttr function_type, /*optional*/::mlir::UnitAttr builtin, /*optional*/::mlir::UnitAttr coroutine, /*optional*/::mlir::UnitAttr lambda, /*optional*/::mlir::UnitAttr no_proto, /*optional*/::mlir::UnitAttr dsolocal, ::cir::GlobalLinkageKindAttr linkage, ::cir::CallingConvAttr calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::mlir::StringAttr sym_visibility, /*optional*/::mlir::UnitAttr comdat, /*optional*/::mlir::ArrayAttr arg_attrs, /*optional*/::mlir::ArrayAttr res_attrs, /*optional*/::mlir::FlatSymbolRefAttr aliasee, /*optional*/::cir::GlobalCtorAttr global_ctor, /*optional*/::cir::GlobalDtorAttr global_dtor, /*optional*/::mlir::ArrayAttr annotations, /*optional*/::mlir::Attribute ast) {
  odsState.getOrAddProperties<Properties>().sym_name = sym_name;
  odsState.getOrAddProperties<Properties>().global_visibility = global_visibility;
  odsState.getOrAddProperties<Properties>().function_type = function_type;
  if (builtin) {
    odsState.getOrAddProperties<Properties>().builtin = builtin;
  }
  if (coroutine) {
    odsState.getOrAddProperties<Properties>().coroutine = coroutine;
  }
  if (lambda) {
    odsState.getOrAddProperties<Properties>().lambda = lambda;
  }
  if (no_proto) {
    odsState.getOrAddProperties<Properties>().no_proto = no_proto;
  }
  if (dsolocal) {
    odsState.getOrAddProperties<Properties>().dsolocal = dsolocal;
  }
  if (linkage) {
    odsState.getOrAddProperties<Properties>().linkage = linkage;
  }
  if (calling_conv) {
    odsState.getOrAddProperties<Properties>().calling_conv = calling_conv;
  }
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (sym_visibility) {
    odsState.getOrAddProperties<Properties>().sym_visibility = sym_visibility;
  }
  if (comdat) {
    odsState.getOrAddProperties<Properties>().comdat = comdat;
  }
  if (arg_attrs) {
    odsState.getOrAddProperties<Properties>().arg_attrs = arg_attrs;
  }
  if (res_attrs) {
    odsState.getOrAddProperties<Properties>().res_attrs = res_attrs;
  }
  if (aliasee) {
    odsState.getOrAddProperties<Properties>().aliasee = aliasee;
  }
  if (global_ctor) {
    odsState.getOrAddProperties<Properties>().global_ctor = global_ctor;
  }
  if (global_dtor) {
    odsState.getOrAddProperties<Properties>().global_dtor = global_dtor;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::StringAttr sym_name, ::cir::VisibilityAttr global_visibility, ::mlir::TypeAttr function_type, /*optional*/::mlir::UnitAttr builtin, /*optional*/::mlir::UnitAttr coroutine, /*optional*/::mlir::UnitAttr lambda, /*optional*/::mlir::UnitAttr no_proto, /*optional*/::mlir::UnitAttr dsolocal, ::cir::GlobalLinkageKindAttr linkage, ::cir::CallingConvAttr calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::mlir::StringAttr sym_visibility, /*optional*/::mlir::UnitAttr comdat, /*optional*/::mlir::ArrayAttr arg_attrs, /*optional*/::mlir::ArrayAttr res_attrs, /*optional*/::mlir::FlatSymbolRefAttr aliasee, /*optional*/::cir::GlobalCtorAttr global_ctor, /*optional*/::cir::GlobalDtorAttr global_dtor, /*optional*/::mlir::ArrayAttr annotations, /*optional*/::mlir::Attribute ast) {
  odsState.getOrAddProperties<Properties>().sym_name = sym_name;
  odsState.getOrAddProperties<Properties>().global_visibility = global_visibility;
  odsState.getOrAddProperties<Properties>().function_type = function_type;
  if (builtin) {
    odsState.getOrAddProperties<Properties>().builtin = builtin;
  }
  if (coroutine) {
    odsState.getOrAddProperties<Properties>().coroutine = coroutine;
  }
  if (lambda) {
    odsState.getOrAddProperties<Properties>().lambda = lambda;
  }
  if (no_proto) {
    odsState.getOrAddProperties<Properties>().no_proto = no_proto;
  }
  if (dsolocal) {
    odsState.getOrAddProperties<Properties>().dsolocal = dsolocal;
  }
  if (linkage) {
    odsState.getOrAddProperties<Properties>().linkage = linkage;
  }
  if (calling_conv) {
    odsState.getOrAddProperties<Properties>().calling_conv = calling_conv;
  }
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (sym_visibility) {
    odsState.getOrAddProperties<Properties>().sym_visibility = sym_visibility;
  }
  if (comdat) {
    odsState.getOrAddProperties<Properties>().comdat = comdat;
  }
  if (arg_attrs) {
    odsState.getOrAddProperties<Properties>().arg_attrs = arg_attrs;
  }
  if (res_attrs) {
    odsState.getOrAddProperties<Properties>().res_attrs = res_attrs;
  }
  if (aliasee) {
    odsState.getOrAddProperties<Properties>().aliasee = aliasee;
  }
  if (global_ctor) {
    odsState.getOrAddProperties<Properties>().global_ctor = global_ctor;
  }
  if (global_dtor) {
    odsState.getOrAddProperties<Properties>().global_dtor = global_dtor;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::llvm::StringRef sym_name, ::cir::VisibilityAttr global_visibility, ::cir::FuncType function_type, /*optional*/bool builtin, /*optional*/bool coroutine, /*optional*/bool lambda, /*optional*/bool no_proto, /*optional*/bool dsolocal, ::cir::GlobalLinkageKind linkage, ::cir::CallingConv calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::mlir::StringAttr sym_visibility, /*optional*/bool comdat, /*optional*/::mlir::ArrayAttr arg_attrs, /*optional*/::mlir::ArrayAttr res_attrs, /*optional*/::mlir::FlatSymbolRefAttr aliasee, /*optional*/::cir::GlobalCtorAttr global_ctor, /*optional*/::cir::GlobalDtorAttr global_dtor, /*optional*/::mlir::ArrayAttr annotations, /*optional*/::mlir::Attribute ast) {
  odsState.getOrAddProperties<Properties>().sym_name = odsBuilder.getStringAttr(sym_name);
  odsState.getOrAddProperties<Properties>().global_visibility = global_visibility;
  odsState.getOrAddProperties<Properties>().function_type = ::mlir::TypeAttr::get(function_type);
  if (builtin) {
    odsState.getOrAddProperties<Properties>().builtin = ((builtin) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (coroutine) {
    odsState.getOrAddProperties<Properties>().coroutine = ((coroutine) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (lambda) {
    odsState.getOrAddProperties<Properties>().lambda = ((lambda) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (no_proto) {
    odsState.getOrAddProperties<Properties>().no_proto = ((no_proto) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (dsolocal) {
    odsState.getOrAddProperties<Properties>().dsolocal = ((dsolocal) ? odsBuilder.getUnitAttr() : nullptr);
  }
  odsState.getOrAddProperties<Properties>().linkage = ::cir::GlobalLinkageKindAttr::get(odsBuilder.getContext(), linkage);
  odsState.getOrAddProperties<Properties>().calling_conv = ::cir::CallingConvAttr::get(odsBuilder.getContext(), calling_conv);
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (sym_visibility) {
    odsState.getOrAddProperties<Properties>().sym_visibility = sym_visibility;
  }
  if (comdat) {
    odsState.getOrAddProperties<Properties>().comdat = ((comdat) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (arg_attrs) {
    odsState.getOrAddProperties<Properties>().arg_attrs = arg_attrs;
  }
  if (res_attrs) {
    odsState.getOrAddProperties<Properties>().res_attrs = res_attrs;
  }
  if (aliasee) {
    odsState.getOrAddProperties<Properties>().aliasee = aliasee;
  }
  if (global_ctor) {
    odsState.getOrAddProperties<Properties>().global_ctor = global_ctor;
  }
  if (global_dtor) {
    odsState.getOrAddProperties<Properties>().global_dtor = global_dtor;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::llvm::StringRef sym_name, ::cir::VisibilityAttr global_visibility, ::cir::FuncType function_type, /*optional*/bool builtin, /*optional*/bool coroutine, /*optional*/bool lambda, /*optional*/bool no_proto, /*optional*/bool dsolocal, ::cir::GlobalLinkageKind linkage, ::cir::CallingConv calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::mlir::StringAttr sym_visibility, /*optional*/bool comdat, /*optional*/::mlir::ArrayAttr arg_attrs, /*optional*/::mlir::ArrayAttr res_attrs, /*optional*/::mlir::FlatSymbolRefAttr aliasee, /*optional*/::cir::GlobalCtorAttr global_ctor, /*optional*/::cir::GlobalDtorAttr global_dtor, /*optional*/::mlir::ArrayAttr annotations, /*optional*/::mlir::Attribute ast) {
  odsState.getOrAddProperties<Properties>().sym_name = odsBuilder.getStringAttr(sym_name);
  odsState.getOrAddProperties<Properties>().global_visibility = global_visibility;
  odsState.getOrAddProperties<Properties>().function_type = ::mlir::TypeAttr::get(function_type);
  if (builtin) {
    odsState.getOrAddProperties<Properties>().builtin = ((builtin) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (coroutine) {
    odsState.getOrAddProperties<Properties>().coroutine = ((coroutine) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (lambda) {
    odsState.getOrAddProperties<Properties>().lambda = ((lambda) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (no_proto) {
    odsState.getOrAddProperties<Properties>().no_proto = ((no_proto) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (dsolocal) {
    odsState.getOrAddProperties<Properties>().dsolocal = ((dsolocal) ? odsBuilder.getUnitAttr() : nullptr);
  }
  odsState.getOrAddProperties<Properties>().linkage = ::cir::GlobalLinkageKindAttr::get(odsBuilder.getContext(), linkage);
  odsState.getOrAddProperties<Properties>().calling_conv = ::cir::CallingConvAttr::get(odsBuilder.getContext(), calling_conv);
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (sym_visibility) {
    odsState.getOrAddProperties<Properties>().sym_visibility = sym_visibility;
  }
  if (comdat) {
    odsState.getOrAddProperties<Properties>().comdat = ((comdat) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (arg_attrs) {
    odsState.getOrAddProperties<Properties>().arg_attrs = arg_attrs;
  }
  if (res_attrs) {
    odsState.getOrAddProperties<Properties>().res_attrs = res_attrs;
  }
  if (aliasee) {
    odsState.getOrAddProperties<Properties>().aliasee = aliasee;
  }
  if (global_ctor) {
    odsState.getOrAddProperties<Properties>().global_ctor = global_ctor;
  }
  if (global_dtor) {
    odsState.getOrAddProperties<Properties>().global_dtor = global_dtor;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::StringAttr sym_name, ::cir::VisibilityAttr global_visibility, /*optional*/::mlir::StringAttr sym_visibility, ::mlir::TypeAttr sym_type, ::cir::GlobalLinkageKindAttr linkage, /*optional*/::cir::AddressSpaceAttr addr_space, /*optional*/::cir::TLS_ModelAttr tls_model, /*optional*/::mlir::Attribute initial_value, /*optional*/::mlir::UnitAttr comdat, /*optional*/::mlir::UnitAttr constant, /*optional*/::mlir::UnitAttr dsolocal, /*optional*/::mlir::IntegerAttr alignment, /*optional*/::cir::ASTVarDeclInterface ast, /*optional*/::mlir::StringAttr section, /*optional*/::mlir::ArrayAttr annotations) {
  odsState.getOrAddProperties<Properties>().sym_name = sym_name;
  if (global_visibility) {
    odsState.getOrAddProperties<Properties>().global_visibility = global_visibility;
  }
  if (sym_visibility) {
    odsState.getOrAddProperties<Properties>().sym_visibility = sym_visibility;
  }
  odsState.getOrAddProperties<Properties>().sym_type = sym_type;
  odsState.getOrAddProperties<Properties>().linkage = linkage;
  if (addr_space) {
    odsState.getOrAddProperties<Properties>().addr_space = addr_space;
  }
  if (tls_model) {
    odsState.getOrAddProperties<Properties>().tls_model = tls_model;
  }
  if (initial_value) {
    odsState.getOrAddProperties<Properties>().initial_value = initial_value;
  }
  if (comdat) {
    odsState.getOrAddProperties<Properties>().comdat = comdat;
  }
  if (constant) {
    odsState.getOrAddProperties<Properties>().constant = constant;
  }
  if (dsolocal) {
    odsState.getOrAddProperties<Properties>().dsolocal = dsolocal;
  }
  if (alignment) {
    odsState.getOrAddProperties<Properties>().alignment = alignment;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  if (section) {
    odsState.getOrAddProperties<Properties>().section = section;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  (void)odsState.addRegion();
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::StringAttr sym_name, ::cir::VisibilityAttr global_visibility, /*optional*/::mlir::StringAttr sym_visibility, ::mlir::TypeAttr sym_type, ::cir::GlobalLinkageKindAttr linkage, /*optional*/::cir::AddressSpaceAttr addr_space, /*optional*/::cir::TLS_ModelAttr tls_model, /*optional*/::mlir::Attribute initial_value, /*optional*/::mlir::UnitAttr comdat, /*optional*/::mlir::UnitAttr constant, /*optional*/::mlir::UnitAttr dsolocal, /*optional*/::mlir::IntegerAttr alignment, /*optional*/::cir::ASTVarDeclInterface ast, /*optional*/::mlir::StringAttr section, /*optional*/::mlir::ArrayAttr annotations) {
  odsState.getOrAddProperties<Properties>().sym_name = sym_name;
  if (global_visibility) {
    odsState.getOrAddProperties<Properties>().global_visibility = global_visibility;
  }
  if (sym_visibility) {
    odsState.getOrAddProperties<Properties>().sym_visibility = sym_visibility;
  }
  odsState.getOrAddProperties<Properties>().sym_type = sym_type;
  odsState.getOrAddProperties<Properties>().linkage = linkage;
  if (addr_space) {
    odsState.getOrAddProperties<Properties>().addr_space = addr_space;
  }
  if (tls_model) {
    odsState.getOrAddProperties<Properties>().tls_model = tls_model;
  }
  if (initial_value) {
    odsState.getOrAddProperties<Properties>().initial_value = initial_value;
  }
  if (comdat) {
    odsState.getOrAddProperties<Properties>().comdat = comdat;
  }
  if (constant) {
    odsState.getOrAddProperties<Properties>().constant = constant;
  }
  if (dsolocal) {
    odsState.getOrAddProperties<Properties>().dsolocal = dsolocal;
  }
  if (alignment) {
    odsState.getOrAddProperties<Properties>().alignment = alignment;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  if (section) {
    odsState.getOrAddProperties<Properties>().section = section;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::llvm::StringRef sym_name, ::cir::VisibilityAttr global_visibility, /*optional*/::mlir::StringAttr sym_visibility, ::mlir::Type sym_type, ::cir::GlobalLinkageKind linkage, /*optional*/::cir::AddressSpaceAttr addr_space, /*optional*/::cir::TLS_ModelAttr tls_model, /*optional*/::mlir::Attribute initial_value, /*optional*/bool comdat, /*optional*/bool constant, /*optional*/bool dsolocal, /*optional*/::mlir::IntegerAttr alignment, /*optional*/::cir::ASTVarDeclInterface ast, /*optional*/::mlir::StringAttr section, /*optional*/::mlir::ArrayAttr annotations) {
  odsState.getOrAddProperties<Properties>().sym_name = odsBuilder.getStringAttr(sym_name);
  odsState.getOrAddProperties<Properties>().global_visibility = global_visibility;
  if (sym_visibility) {
    odsState.getOrAddProperties<Properties>().sym_visibility = sym_visibility;
  }
  odsState.getOrAddProperties<Properties>().sym_type = ::mlir::TypeAttr::get(sym_type);
  odsState.getOrAddProperties<Properties>().linkage = ::cir::GlobalLinkageKindAttr::get(odsBuilder.getContext(), linkage);
  if (addr_space) {
    odsState.getOrAddProperties<Properties>().addr_space = addr_space;
  }
  if (tls_model) {
    odsState.getOrAddProperties<Properties>().tls_model = tls_model;
  }
  if (initial_value) {
    odsState.getOrAddProperties<Properties>().initial_value = initial_value;
  }
  if (comdat) {
    odsState.getOrAddProperties<Properties>().comdat = ((comdat) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (constant) {
    odsState.getOrAddProperties<Properties>().constant = ((constant) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (dsolocal) {
    odsState.getOrAddProperties<Properties>().dsolocal = ((dsolocal) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (alignment) {
    odsState.getOrAddProperties<Properties>().alignment = alignment;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  if (section) {
    odsState.getOrAddProperties<Properties>().section = section;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  (void)odsState.addRegion();
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::llvm::StringRef sym_name, ::cir::VisibilityAttr global_visibility, /*optional*/::mlir::StringAttr sym_visibility, ::mlir::Type sym_type, ::cir::GlobalLinkageKind linkage, /*optional*/::cir::AddressSpaceAttr addr_space, /*optional*/::cir::TLS_ModelAttr tls_model, /*optional*/::mlir::Attribute initial_value, /*optional*/bool comdat, /*optional*/bool constant, /*optional*/bool dsolocal, /*optional*/::mlir::IntegerAttr alignment, /*optional*/::cir::ASTVarDeclInterface ast, /*optional*/::mlir::StringAttr section, /*optional*/::mlir::ArrayAttr annotations) {
  odsState.getOrAddProperties<Properties>().sym_name = odsBuilder.getStringAttr(sym_name);
  odsState.getOrAddProperties<Properties>().global_visibility = global_visibility;
  if (sym_visibility) {
    odsState.getOrAddProperties<Properties>().sym_visibility = sym_visibility;
  }
  odsState.getOrAddProperties<Properties>().sym_type = ::mlir::TypeAttr::get(sym_type);
  odsState.getOrAddProperties<Properties>().linkage = ::cir::GlobalLinkageKindAttr::get(odsBuilder.getContext(), linkage);
  if (addr_space) {
    odsState.getOrAddProperties<Properties>().addr_space = addr_space;
  }
  if (tls_model) {
    odsState.getOrAddProperties<Properties>().tls_model = tls_model;
  }
  if (initial_value) {
    odsState.getOrAddProperties<Properties>().initial_value = initial_value;
  }
  if (comdat) {
    odsState.getOrAddProperties<Properties>().comdat = ((comdat) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (constant) {
    odsState.getOrAddProperties<Properties>().constant = ((constant) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (dsolocal) {
    odsState.getOrAddProperties<Properties>().dsolocal = ((dsolocal) ? odsBuilder.getUnitAttr() : nullptr);
  }
  if (alignment) {
    odsState.getOrAddProperties<Properties>().alignment = alignment;
  }
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  if (section) {
    odsState.getOrAddProperties<Properties>().section = section;
  }
  if (annotations) {
    odsState.getOrAddProperties<Properties>().annotations = annotations;
  }
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::Value condition) {
  odsState.addOperands(condition);
  (void)odsState.addRegion();
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::Value condition) {
  odsState.addOperands(condition);
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, /*optional*/::mlir::Type result, ::mlir::StringAttr intrinsic_name, ::mlir::ValueRange arg_ops) {
  odsState.addOperands(arg_ops);
  odsState.getOrAddProperties<Properties>().intrinsic_name = intrinsic_name;
  if (result)
    odsState.addTypes(result);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::StringAttr intrinsic_name, ::mlir::ValueRange arg_ops) {
  odsState.addOperands(arg_ops);
  odsState.getOrAddProperties<Properties>().intrinsic_name = intrinsic_name;
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, /*optional*/::mlir::Type result, ::llvm::StringRef intrinsic_name, ::mlir::ValueRange arg_ops) {
  odsState.addOperands(arg_ops);
  odsState.getOrAddProperties<Properties>().intrinsic_name = odsBuilder.getStringAttr(intrinsic_name);
  if (result)
    odsState.addTypes(result);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::llvm::StringRef intrinsic_name, ::mlir::ValueRange arg_ops) {
  odsState.addOperands(arg_ops);
  odsState.getOrAddProperties<Properties>().intrinsic_name = odsBuilder.getStringAttr(intrinsic_name);
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, /*optional*/::mlir::Type results) {
  (void)odsState.addRegion();
  if (results)
    odsState.addTypes(results);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes) {
  (void)odsState.addRegion();
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::Value condition) {
  odsState.addOperands(condition);
  (void)odsState.addRegion();
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::Value condition) {
  odsState.addOperands(condition);
  (void)odsState.addRegion();
  assert(resultTypes.size() == 0u && "mismatched number of results");
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, /*optional*/::mlir::Type result, ::mlir::Value cond) {
  odsState.addOperands(cond);
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  if (result)
    odsState.addTypes(result);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::Value cond) {
  odsState.addOperands(cond);
  (void)odsState.addRegion();
  (void)odsState.addRegion();
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, /*optional*/::mlir::Type result, ::mlir::ValueRange contOperands, ::mlir::ValueRange landingPadOperands, /*optional*/::mlir::FlatSymbolRefAttr callee, ::mlir::ValueRange arg_ops, ::cir::CallingConvAttr calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::cir::ASTCallExprInterface ast, ::mlir::Block *cont, ::mlir::Block *landing_pad) {
  odsState.addOperands(contOperands);
  odsState.addOperands(landingPadOperands);
  odsState.addOperands(arg_ops);
  ::llvm::copy(::llvm::ArrayRef<int32_t>({static_cast<int32_t>(contOperands.size()), static_cast<int32_t>(landingPadOperands.size()), static_cast<int32_t>(arg_ops.size())}), odsState.getOrAddProperties<Properties>().operandSegmentSizes.begin());
  if (callee) {
    odsState.getOrAddProperties<Properties>().callee = callee;
  }
  if (calling_conv) {
    odsState.getOrAddProperties<Properties>().calling_conv = calling_conv;
  }
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  odsState.addSuccessors(cont);
  odsState.addSuccessors(landing_pad);
  if (result)
    odsState.addTypes(result);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::ValueRange contOperands, ::mlir::ValueRange landingPadOperands, /*optional*/::mlir::FlatSymbolRefAttr callee, ::mlir::ValueRange arg_ops, ::cir::CallingConvAttr calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::cir::ASTCallExprInterface ast, ::mlir::Block *cont, ::mlir::Block *landing_pad) {
  odsState.addOperands(contOperands);
  odsState.addOperands(landingPadOperands);
  odsState.addOperands(arg_ops);
  ::llvm::copy(::llvm::ArrayRef<int32_t>({static_cast<int32_t>(contOperands.size()), static_cast<int32_t>(landingPadOperands.size()), static_cast<int32_t>(arg_ops.size())}), odsState.getOrAddProperties<Properties>().operandSegmentSizes.begin());
  if (callee) {
    odsState.getOrAddProperties<Properties>().callee = callee;
  }
  if (calling_conv) {
    odsState.getOrAddProperties<Properties>().calling_conv = calling_conv;
  }
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  odsState.addSuccessors(cont);
  odsState.addSuccessors(landing_pad);
  odsState.addTypes(resultTypes);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, /*optional*/::mlir::Type result, ::mlir::ValueRange contOperands, ::mlir::ValueRange landingPadOperands, /*optional*/::mlir::FlatSymbolRefAttr callee, ::mlir::ValueRange arg_ops, ::cir::CallingConv calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::cir::ASTCallExprInterface ast, ::mlir::Block *cont, ::mlir::Block *landing_pad) {
  odsState.addOperands(contOperands);
  odsState.addOperands(landingPadOperands);
  odsState.addOperands(arg_ops);
  ::llvm::copy(::llvm::ArrayRef<int32_t>({static_cast<int32_t>(contOperands.size()), static_cast<int32_t>(landingPadOperands.size()), static_cast<int32_t>(arg_ops.size())}), odsState.getOrAddProperties<Properties>().operandSegmentSizes.begin());
  if (callee) {
    odsState.getOrAddProperties<Properties>().callee = callee;
  }
  odsState.getOrAddProperties<Properties>().calling_conv = ::cir::CallingConvAttr::get(odsBuilder.getContext(), calling_conv);
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  odsState.addSuccessors(cont);
  odsState.addSuccessors(landing_pad);
  if (result)
    odsState.addTypes(result);
}

void build(::mlir::OpBuilder &odsBuilder, ::mlir::OperationState &odsState, ::mlir::TypeRange resultTypes, ::mlir::ValueRange contOperands, ::mlir::ValueRange landingPadOperands, /*optional*/::mlir::FlatSymbolRefAttr callee, ::mlir::ValueRange arg_ops, ::cir::CallingConv calling_conv, ::cir::ExtraFuncAttributesAttr extra_attrs, /*optional*/::cir::ASTCallExprInterface ast, ::mlir::Block *cont, ::mlir::Block *landing_pad) {
  odsState.addOperands(contOperands);
  odsState.addOperands(landingPadOperands);
  odsState.addOperands(arg_ops);
  ::llvm::copy(::llvm::ArrayRef<int32_t>({static_cast<int32_t>(contOperands.size()), static_cast<int32_t>(landingPadOperands.size()), static_cast<int32_t>(arg_ops.size())}), odsState.getOrAddProperties<Properties>().operandSegmentSizes.begin());
  if (callee) {
    odsState.getOrAddProperties<Properties>().callee = callee;
  }
  odsState.getOrAddProperties<Properties>().calling_conv = ::cir::CallingConvAttr::get(odsBuilder.getContext(), calling_conv);
  odsState.getOrAddProperties<Properties>().extra_attrs = extra_attrs;
  if (ast) {
    odsState.getOrAddProperties<Properties>().ast = ast;
  }
  odsState.addSuccessors(cont);
  odsState.addSuccessors(landing_pad);
  odsState.addTypes(resultTypes);
}

